I"*<h2 id="投影变换中视锥的定义">投影变换中视锥的定义</h2>

<p>在变换部分，我们讲到透视投影的基本步骤是将视锥压缩成长方体，再经过正交投影的方式变换到$[-1,1]^3$空间。对于一个视锥，在轴上我们用一个近平面和远平面表示。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-perspective.png" />
</center>

<p>而对于x和y轴上，是用视场角和宽高比来定义一个视锥。首先我们对近平面定义一个宽和高，这样就可以得到宽高比；另外我们还需要定义视场角，其中垂直视场角表示的是视锥最上边界到最下边界的夹角。通过垂直视场角和宽高比就可以算出水平的视场角。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-perspective1.png" />
</center>

<p>如下图所示，假设近平面距离为n，高度为t,就可以计算得到视锥的视场角。假设近平面的宽度为r，则视锥的宽高比同样可以得到。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-perspective2.png" />
</center>

<h2 id="光栅化">光栅化</h2>

<p>物体经过投影到$[-1,1]^3$后，最终要将立方体中的点投影到屏幕中。所谓屏幕，是由像素组成的阵列，其中阵列的尺寸表示的就是屏幕的分辨率。</p>

<p>光栅化的含义就是将图像显示在屏幕上。</p>
<h3 id="屏幕空间的定义">屏幕空间的定义</h3>
<p>横轴表示x轴，纵轴表示y轴。像素索引是从(0,0)到(width-1, height-1)，像素中心在(x+0.5, y+0.5)</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-screen_definition.png" />
</center>

<h3 id="视口变换">视口变换</h3>
<p>我们需要将$[-1, 1]^3$投影到屏幕坐标系$[0,width]\times [0,height]\times[n,f]$,对应的投影矩阵为：
\(M_{viewpoint}=
\begin{bmatrix}
\frac{width}{2}&amp;0&amp;0&amp;\frac{width}{2} \\
0&amp;\frac{height}{2}&amp;0&amp;\frac{height}{2} \\
0&amp;0&amp;\frac{f-n}{2}&amp;\frac{n-f}{2}\\
0&amp;0&amp;0&amp;1
\end{bmatrix}\)
即缩放到宽高再将中心移动到$\frac{width}{2}$和$\frac{height}{2}$，将-1映射到n，1映射到f。</p>

<h3 id="显示设备">显示设备</h3>
<h4 id="阴极射线管cathode-ray-tube">阴极射线管(Cathode Ray Tube)</h4>
<p>早期的光栅显示设备是示波器，其原理是阴极射线管。电子加速后经过磁场后发生偏转打在显示屏上,由于线束是按下图所示的阵列的顺序打在平面上，当速度足够快的时候就会形成图像。 为了提高效率，隔行扫描技术被运用在视频显示。在扫描时，一帧扫描单数行、一阵显示双数行，这样降低了处理的数量。但由于缺行，在显示高速运动的物体时会出现错位的情况。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-crt.png" />
</center>

<h4 id="液晶显示器liquid-crystal-display">液晶显示器(Liquid Crystal Display)</h4>
<p>液晶显示器原理时利用光的偏振效应，在两端设置相位差90度的偏振片，这样在Off State的时候光经过第一个偏振片之后无法透过第二个偏振片。在On State，经过液晶的扭曲之后光的相位发生变化后就能够经过第二块偏振片</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-lcd.png" />
</center>

<h4 id="发光二极管阵列显示light-emitting-diode-arrayled">发光二极管阵列显示（Light emitting diode array，LED）</h4>
<p>LED阵列就是使用多个发光二极管组成的阵列。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-led.png" />
</center>

<h4 id="电子墨水屏">电子墨水屏</h4>
<p>通过电极控制白色或黑色墨水的分布可以实现显示黑色或白色。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-electronic_ink.png" />
</center>

<h3 id="三角形的栅格化">三角形的栅格化</h3>

<p>三角形具有以下特点：</p>
<ol>
  <li>三角形必定是平面</li>
  <li>三角形的内外定义时清晰的，不存在凹三角形</li>
  <li>三角形内部的插值更简单</li>
</ol>

<p>栅格化三角形包括以下几个步骤：</p>
<ol>
  <li>确定在三角形内部的点</li>
  <li>反走样</li>
</ol>

<h4 id="如何确定在三角形内部的点">如何确定在三角形内部的点</h4>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-inside.png" />
</center>

<p>由于我们可以利用向量叉积的方法判断点在线段的左右，对每一个边运用叉积，就可以判断点是否再三角形内部。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-inside1.png" />
</center>

<p>为了加速该步骤，可以先根据三角形的顶点确定最小包围盒，再只在包围盒区域判断。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-inside2.png" />
</center>

<h3 id="走样">走样</h3>

<p>了解反走样之前要先知道什么是走样。根据之前判断点是否在三角形内的方法我们可以很容易得到右边这样的图像。但是我们会发生这张图片有很明显的锯齿状。这种出现锯齿的情况就成为走样。而反走样的目的就是去除光栅化时的锯齿。</p>
<table><tr>
<td><img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-aliasing.png" border="0" /></td>
<td><img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-aliasing1.png" border="0" /></td>
</tr></table>

<p>反走样的方法是在采样之前先对原始图像做模糊操作。如下图所示，经过模糊后采样的栅格就不会出现明显的锯齿状。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-antialiasing.png" />
</center>

<p>要从原理上理解反走样的方法，首先我们需要介绍一些数字信号处理相关的知识</p>

<h3 id="采样">采样</h3>

<p>在信号处理领域，采样是将信号从连续时间域上的模拟信号转换到离散时间域上的离散信号的过程。在光栅化的例子中，就是使用有限的栅格表示一个三角形的过程。由于采样是连续函数的近似方法，实际采样得到的信号和原始信号之间会出现瑕疵，这种瑕疵被称为采样误差（sampling artifacts）。</p>

<p>除了上面介绍的锯齿之外，下方这种摩尔纹也是采样误差造成的。下图中摩尔纹产生的原因是右边的图片只显示左边图片的奇数行或偶数行。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-mole.png" />
</center>

<p>除此之外，高速行驶车辆的轮子是逆时针旋转，但在人的视觉中有可能出现顺时针旋转的情况，这也是走样的一个例子。 走样的数学解释可以看我的博客中的<a href="https://xjxpx.github.io/2020/04/02/%E6%95%B0%E5%AD%A6-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/">傅里叶变换</a>部分。</p>

<p>傅里叶变换的知识告诉我们，防止信号混叠的方法有：</p>
<ol>
  <li>提高采样率</li>
  <li>将原始信号的频谱经过一个低通滤波器</li>
</ol>

<h4 id="图像中的低通滤波器">图像中的低通滤波器</h4>

<p>对于下面左边的图片，将其转换到频域上可以得到右边的图像。右图中心表示最低频区域，周围为最高频区域，在不同频率的亮度表示在该频率信息的多少。频率图像中有一个十字形的亮条纹，这是因为对图像做傅里叶变换时会将图片向四周复制很多遍形成周期性的变化，但是复制之后图像的边界会出现很大的亮度变化，频率图中也就出现十字的亮条纹。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-lowpassfilter.png" />
</center>

<p>下面这张图就是将图像低频信号去除之后的图像，只保留了图像亮度变化明显的区域。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-highpassfilter.png" />
</center>

<p>下面这张图就是将图像高频信号去除之后的图像，只保留了亮度变化不明显的区域。</p>

<ul>
  <li><strong>卷积滤波器</strong></li>
</ul>

<p>根据卷积定理，时域上的卷积是频域上的乘积。对于下面这张图所示的卷积核与图像做卷积，可以先分别将图像和卷积核变换到频域空间再做乘积。因为相乘之后的频域空间只剩低频的，所以这个卷积核近似于一个低通滤波器。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-convolution.png" />
</center>

<p>至于为什么卷积核的频域空间是这样的可以参考下面左边这张图的频域空间，如果我们将左边的方框变大，则右边就会相应的缩小。可以理解成用更大的卷积核会使得图像更加模糊，也就是卷积核的频域空间区域更小了。</p>
<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-convolution1.png" />
</center>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-convolution2.png" />
</center>

<h3 id="采样方法">采样方法</h3>

<p>在确定三角形内部的点之后，需要对每一个三角形的边经过的像素进行模糊，可以通过计算单个像素内部黑色部分和白色部分的比例重新计算像素值。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-sample.png" />
</center>

<p>在实际中，我们很难执行上面所说的操作。通常使用近似的方法，如MSAA（Multi Sample Antialiasing）</p>

<h4 id="msaamulti-sample-antialiasing">MSAA（Multi Sample Antialiasing）</h4>

<p>我们将每个像素又细分成很多个像素组成的格子。首先用大的像素点判断和三角形的位置关系。如果点在三角形内，计算细分的子像素有多少个在三角形内，根据子像素的占比重新计算像素值。此外还要考虑大的像素点在三角形外，但子像素在三角形内的部分。</p>

<center>
    <img src="https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-msaa.png" />
</center>

:ET