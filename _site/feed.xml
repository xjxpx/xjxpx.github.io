<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-27T14:47:06+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your Site Title</title><subtitle>Your Site Description
</subtitle><author><name>XPX</name><email>xuepeixin2016@gmail.com</email></author><entry><title type="html">计算机图形学（七）——高级渲染技术（Advanced Topics and Randering）</title><link href="http://localhost:4000/2020/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B8%E6%9C%BA-%E6%A3%B1%E9%95%9C-%E5%85%89%E5%9C%BA.html" rel="alternate" type="text/html" title="计算机图形学（七）——高级渲染技术（Advanced Topics and Randering）" /><published>2020-05-25T00:00:00+08:00</published><updated>2020-05-25T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E7%9B%B8%E6%9C%BA%E3%80%81%E6%A3%B1%E9%95%9C%E3%80%81%E5%85%89%E5%9C%BA</id><content type="html" xml:base="http://localhost:4000/2020/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B8%E6%9C%BA-%E6%A3%B1%E9%95%9C-%E5%85%89%E5%9C%BA.html">&lt;h1 id=&quot;相机&quot;&gt;相机&lt;/h1&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">相机</summary></entry><entry><title type="html">计算机图形学（七）——高级渲染技术（Advanced Topics and Randering）</title><link href="http://localhost:4000/2020/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E9%AB%98%E7%BA%A7%E6%B8%B2%E6%9F%93%E6%8A%80%E6%9C%AF.html" rel="alternate" type="text/html" title="计算机图形学（七）——高级渲染技术（Advanced Topics and Randering）" /><published>2020-05-22T00:00:00+08:00</published><updated>2020-05-22T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E6%B8%B2%E6%9F%93%E6%8A%80%E6%9C%AF</id><content type="html" xml:base="http://localhost:4000/2020/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E9%AB%98%E7%BA%A7%E6%B8%B2%E6%9F%93%E6%8A%80%E6%9C%AF.html">&lt;h1 id=&quot;高级光线传播和材质&quot;&gt;高级光线传播和材质&lt;/h1&gt;

&lt;h2 id=&quot;高级光线传播&quot;&gt;高级光线传播&lt;/h2&gt;

&lt;h3 id=&quot;无偏光线传播&quot;&gt;无偏光线传播&lt;/h3&gt;

&lt;h4 id=&quot;蒙特卡洛积分中的无偏估计&quot;&gt;蒙特卡洛积分中的无偏估计&lt;/h4&gt;

&lt;p&gt;蒙特卡洛的期望永远为真实值，则估计的结果为&lt;strong&gt;无偏&lt;/strong&gt;的。&lt;/p&gt;

&lt;h4 id=&quot;双向路径追踪&quot;&gt;双向路径追踪&lt;/h4&gt;

&lt;p&gt;双向路径追踪指的是假设分别从光源和观测点发出光线得到两条子路径，再将两条子路径的终点连接起来。&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200523165215976.png&quot; alt=&quot;image-20200523165215976&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种方法在处理光源复杂的时候效果很好，下图中的光源朝上打到天花板，因此大部分的光都是间接光源。由于双向路径追踪就可以很快地找到光源打到其他表面后的间接光源，所以右边由双向光线追踪方法生成的图像质量要明显好于左边。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200523165637706.png&quot; alt=&quot;image-20200523165637706&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;metropolis-light-transportmlt&quot;&gt;Metropolis Light Transport(MLT)&lt;/h4&gt;

&lt;p&gt;Metropolis Light Transport核心思想在于，一旦发现对结果影响更大的有效路径后，Metropolis采样方法就会在path space中该路径临近的区域继续采样，使得得到的路径对结果的影响较大的可能性更大。这里有一个假设，就是在path space中一条高贡献度路径周围的路径也很可能是高贡献度的，实际上很多情况下也都是成立的，比如焦散区域。再举一个形象的例子，比如在下图中光源和视点分布位于两个房间，房间通过一个狭小的孔相连：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/07192134-c22aa311f23c4285ae7b2fe1426efc03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设已经采样到一条有效路径P后(橙色路径)，MLT算法在path space相邻区域采样可以很容易地得到另外一条有效路径P’(绿色的路径)，而BDPT则是完全重新搜索路径，很可能得到的下面一条路径是一条无效路径(光线没有能够通过这个狭小的口子到达另外一个房间)，这个例子解释了为什么在一些复杂的场景下MLT的效果会比BDPT好。&lt;/p&gt;

&lt;p&gt;MLT存在一些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;很难估计收敛速度&lt;/li&gt;
  &lt;li&gt;每个像素收敛的速度不同，导致整个图像看上去很脏的感觉&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;有偏光线传播&quot;&gt;有偏光线传播&lt;/h3&gt;

&lt;h4 id=&quot;蒙特卡洛积分中的有偏估计&quot;&gt;蒙特卡洛积分中的有偏估计&lt;/h4&gt;

&lt;p&gt;在某些情况下，蒙特卡洛积分的期望不为真实值，则估计的结果为&lt;strong&gt;有偏&lt;/strong&gt;的。&lt;/p&gt;

&lt;h4 id=&quot;一致估计&quot;&gt;一致估计&lt;/h4&gt;

&lt;p&gt;如果采样的数量足够多时，积分会收敛到真实值，则称这种估计为&lt;strong&gt;一致&lt;/strong&gt;的。&lt;/p&gt;

&lt;h4 id=&quot;光子映射photon-mapping&quot;&gt;光子映射（Photon Mapping）&lt;/h4&gt;

&lt;p&gt;在真实感渲染的领域，除开PT系列算法(pt,bdpt,mlt等)外，还有一个很重要的算法，就是光子映射(photon mapping)算法，这是一种统计上有偏的离线渲染算法。PT系列算法是统计无偏的算法，但是它们最大的问题是在面对（Specular-Diffuse-Specular）SDS路径时求解的低效，所谓SDS的典型就是一个焦散光斑经过镜面反射到眼睛里，而光子映射在这方面相对而言是有比较大的优势的。&lt;/p&gt;

&lt;p&gt;PM最早由Jensen于1996年引入，它是一个two-pass的全局光照算法，第一步从光源发射若干光子到场景空间，经过N次的发射或者折射直到光子被吸收，或者逸出场景。在漫反射表面记录下光子的每次碰撞数据，组成一个全局光子图(镜面则不需要，因为我们处理镜面的时候是按照传统raytrace的方法处理的)。第二步则是利用之前生成的光子图进行渲染，渲染通常采用分布式光线跟踪算法。&lt;/p&gt;

&lt;p&gt;下面的关键就是如何利用这张光子图，一般而言，有两种利用方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;直接将光子图可视化：
    &lt;ul&gt;
      &lt;li&gt;直方图估计&lt;/li&gt;
      &lt;li&gt;核函数估计&lt;/li&gt;
      &lt;li&gt;K-近邻估计&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;只利用光子图计算间接光照和焦散光照：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们把场景的光照分为四个部分：直接光照(漫反射表面)，间接光照，焦散光照，镜面(透明面)光照，直接光照和镜面(透明面)光照可以由光线跟踪来计算，间接光照由光子图来计算，可以考虑像1中一样将光子图可视化，但是同样地会产生低频噪声使图片质量下降。这里，由于只需要计算间接光，所以有了另外一种方法，即利用final gathering计算每个点的间接光照。&lt;/p&gt;

&lt;h4 id=&quot;vertex-connection-and-merging&quot;&gt;Vertex Connection and Merging&lt;/h4&gt;

&lt;p&gt;是BDPT和Photon Mapping 的结合。&lt;/p&gt;

&lt;p&gt;在BDPT中，原本当分别从光源和观测点出发的两个子路径没有办法相连的时候会选择放弃子路径。而在VCM中则会选择保留子路径最后生成的光子，并且和周围的光子进行合并。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525132358587.png&quot; alt=&quot;image-20200525132358587&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;实时辐射度instant-radiosity&quot;&gt;实时辐射度（Instant Radiosity）&lt;/h3&gt;

&lt;p&gt;实时辐射度的基本思想就是将光源打到的表面视为新的光源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525132937007.png&quot; alt=&quot;image-20200525132937007&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;高级外观建模&quot;&gt;高级外观建模&lt;/h2&gt;

&lt;h3 id=&quot;非表面模型&quot;&gt;非表面模型&lt;/h3&gt;

&lt;h4 id=&quot;散射介质participating-media&quot;&gt;散射介质（Participating Media）&lt;/h4&gt;

&lt;p&gt;光线在经过散射介质会发生吸收（absorb）和散射(scatter)现象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525133607348.png&quot; alt=&quot;image-20200525133607348&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在散射过程中，光向周围发射的强度可能是不均匀的。和BRDF类似，该分布用相位函数（Phase Function）表示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525133816812.png&quot; alt=&quot;image-20200525133816812&quot; /&gt;&lt;/p&gt;

&lt;p&gt;渲染流程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;随机选择一个方向&lt;/li&gt;
  &lt;li&gt;随机选择一定的距离前进&lt;/li&gt;
  &lt;li&gt;将每一个终点连接光源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525134433589.png&quot; alt=&quot;image-20200525134433589&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;头发外观&quot;&gt;头发外观&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525134825355.png&quot; alt=&quot;image-20200525134825355&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;marschner-model&quot;&gt;Marschner Model&lt;/h5&gt;

&lt;p&gt;将头发假设为玻璃介质，会发生折射和反射。下图TT表示发生两次折射，TRT表示发生折射-反射-折射现象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525134955039.png&quot; alt=&quot;image-20200525134955039&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;双层圆柱模型&quot;&gt;双层圆柱模型&lt;/h4&gt;

&lt;p&gt;动物的毛发内部有髓质结构，光线打到髓质后会发生明显的散射现象。因此研究者将毛发模型描述为双层圆柱模型。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525135755731.png&quot; alt=&quot;image-20200525135755731&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如下图所示，光线进入毛发表面后，会发生反射和折射。折射之后如果打到髓质之后会发生散射，而光线接触到毛发表面后同样会发生折射和反射。其中$TT^S$和$TRT^S$表示的是光线经过髓质之后发生的散射光线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525140040013.png&quot; alt=&quot;image-20200525140040013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最终头发模型由五个光线分量组成：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525140231053.png&quot; alt=&quot;image-20200525140231053&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;颗粒材质&quot;&gt;颗粒材质&lt;/h4&gt;

&lt;h3 id=&quot;表面模型&quot;&gt;表面模型&lt;/h3&gt;

&lt;h4 id=&quot;半透明材质translucent-material&quot;&gt;半透明材质（Translucent Material）&lt;/h4&gt;

&lt;p&gt;光线进入材质后经过多次的散射后离开材质。如玉石等材质就属于半透明材质。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525140922442.png&quot; alt=&quot;image-20200525140922442&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;次表面反射subsurface-reflection&quot;&gt;次表面反射（Subsurface Reflection）&lt;/h5&gt;

&lt;p&gt;发生在半透明材质表面的反射为次表面反射，由于光线在内部也发生了散射，因此只有BRDF不能描述次表面反射。用于描述次表面反射的方程为散射方程BSSRDF，相比BRDF，BSSRDF增加了一个反射位置的变量。
\(L\left(x_{o}, \omega_{o}\right)=\int_{A} \int_{H^{2}} S\left(x_{i}, \omega_{i}, x_{o}, \omega_{o}\right) L_{i}\left(x_{i}, \omega_{i}\right) \cos \theta_{i} \mathrm{d} \omega_{i} \mathrm{d} A\)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525173723977.png&quot; alt=&quot;image-20200525173723977&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;偶极近似dipole-approximation&quot;&gt;偶极近似（Dipole Approximation）&lt;/h5&gt;

&lt;p&gt;为了简化BSSRDF的计算过程，使用两个点光源近似光线散射过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525174309538.png&quot; alt=&quot;image-20200525174309538&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用BSSRDF的效果对比：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525174559444.png&quot; alt=&quot;image-20200525174559444&quot; /&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525174630027.png&quot; alt=&quot;image-20200525174630027&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BRDF&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BSSRDF&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过BSSRDF渲染，可以得到非常真实的图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525175226501.png&quot; alt=&quot;image-20200525175226501&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;布料材质cloth&quot;&gt;布料材质（Cloth）&lt;/h4&gt;

&lt;p&gt;毛线等材质是由多条纤维缠绕而成的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525175832275.png&quot; alt=&quot;image-20200525175832275&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而布料是由成束的纤维按照一定的结构编织而成的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200525180019835.png&quot; alt=&quot;image-20200525180019835&quot; /&gt;&lt;/p&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">高级光线传播和材质 高级光线传播 无偏光线传播 蒙特卡洛积分中的无偏估计 蒙特卡洛的期望永远为真实值，则估计的结果为无偏的。 双向路径追踪 双向路径追踪指的是假设分别从光源和观测点发出光线得到两条子路径，再将两条子路径的终点连接起来。 这种方法在处理光源复杂的时候效果很好，下图中的光源朝上打到天花板，因此大部分的光都是间接光源。由于双向路径追踪就可以很快地找到光源打到其他表面后的间接光源，所以右边由双向光线追踪方法生成的图像质量要明显好于左边。 Metropolis Light Transport(MLT) Metropolis Light Transport核心思想在于，一旦发现对结果影响更大的有效路径后，Metropolis采样方法就会在path space中该路径临近的区域继续采样，使得得到的路径对结果的影响较大的可能性更大。这里有一个假设，就是在path space中一条高贡献度路径周围的路径也很可能是高贡献度的，实际上很多情况下也都是成立的，比如焦散区域。再举一个形象的例子，比如在下图中光源和视点分布位于两个房间，房间通过一个狭小的孔相连： 假设已经采样到一条有效路径P后(橙色路径)，MLT算法在path space相邻区域采样可以很容易地得到另外一条有效路径P’(绿色的路径)，而BDPT则是完全重新搜索路径，很可能得到的下面一条路径是一条无效路径(光线没有能够通过这个狭小的口子到达另外一个房间)，这个例子解释了为什么在一些复杂的场景下MLT的效果会比BDPT好。 MLT存在一些问题： 很难估计收敛速度 每个像素收敛的速度不同，导致整个图像看上去很脏的感觉 有偏光线传播 蒙特卡洛积分中的有偏估计 在某些情况下，蒙特卡洛积分的期望不为真实值，则估计的结果为有偏的。 一致估计 如果采样的数量足够多时，积分会收敛到真实值，则称这种估计为一致的。 光子映射（Photon Mapping） 在真实感渲染的领域，除开PT系列算法(pt,bdpt,mlt等)外，还有一个很重要的算法，就是光子映射(photon mapping)算法，这是一种统计上有偏的离线渲染算法。PT系列算法是统计无偏的算法，但是它们最大的问题是在面对（Specular-Diffuse-Specular）SDS路径时求解的低效，所谓SDS的典型就是一个焦散光斑经过镜面反射到眼睛里，而光子映射在这方面相对而言是有比较大的优势的。 PM最早由Jensen于1996年引入，它是一个two-pass的全局光照算法，第一步从光源发射若干光子到场景空间，经过N次的发射或者折射直到光子被吸收，或者逸出场景。在漫反射表面记录下光子的每次碰撞数据，组成一个全局光子图(镜面则不需要，因为我们处理镜面的时候是按照传统raytrace的方法处理的)。第二步则是利用之前生成的光子图进行渲染，渲染通常采用分布式光线跟踪算法。 下面的关键就是如何利用这张光子图，一般而言，有两种利用方法： 直接将光子图可视化： 直方图估计 核函数估计 K-近邻估计 只利用光子图计算间接光照和焦散光照： 我们把场景的光照分为四个部分：直接光照(漫反射表面)，间接光照，焦散光照，镜面(透明面)光照，直接光照和镜面(透明面)光照可以由光线跟踪来计算，间接光照由光子图来计算，可以考虑像1中一样将光子图可视化，但是同样地会产生低频噪声使图片质量下降。这里，由于只需要计算间接光，所以有了另外一种方法，即利用final gathering计算每个点的间接光照。 Vertex Connection and Merging 是BDPT和Photon Mapping 的结合。 在BDPT中，原本当分别从光源和观测点出发的两个子路径没有办法相连的时候会选择放弃子路径。而在VCM中则会选择保留子路径最后生成的光子，并且和周围的光子进行合并。 实时辐射度（Instant Radiosity） 实时辐射度的基本思想就是将光源打到的表面视为新的光源。 高级外观建模 非表面模型 散射介质（Participating Media） 光线在经过散射介质会发生吸收（absorb）和散射(scatter)现象。 在散射过程中，光向周围发射的强度可能是不均匀的。和BRDF类似，该分布用相位函数（Phase Function）表示。 渲染流程： 随机选择一个方向 随机选择一定的距离前进 将每一个终点连接光源 头发外观 Marschner Model 将头发假设为玻璃介质，会发生折射和反射。下图TT表示发生两次折射，TRT表示发生折射-反射-折射现象。 双层圆柱模型 动物的毛发内部有髓质结构，光线打到髓质后会发生明显的散射现象。因此研究者将毛发模型描述为双层圆柱模型。 如下图所示，光线进入毛发表面后，会发生反射和折射。折射之后如果打到髓质之后会发生散射，而光线接触到毛发表面后同样会发生折射和反射。其中$TT^S$和$TRT^S$表示的是光线经过髓质之后发生的散射光线。 最终头发模型由五个光线分量组成： 颗粒材质 表面模型 半透明材质（Translucent Material） 光线进入材质后经过多次的散射后离开材质。如玉石等材质就属于半透明材质。 次表面反射（Subsurface Reflection） 发生在半透明材质表面的反射为次表面反射，由于光线在内部也发生了散射，因此只有BRDF不能描述次表面反射。用于描述次表面反射的方程为散射方程BSSRDF，相比BRDF，BSSRDF增加了一个反射位置的变量。 \(L\left(x_{o}, \omega_{o}\right)=\int_{A} \int_{H^{2}} S\left(x_{i}, \omega_{i}, x_{o}, \omega_{o}\right) L_{i}\left(x_{i}, \omega_{i}\right) \cos \theta_{i} \mathrm{d} \omega_{i} \mathrm{d} A\) 偶极近似（Dipole Approximation） 为了简化BSSRDF的计算过程，使用两个点光源近似光线散射过程。 使用BSSRDF的效果对比： BRDF BSSRDF 通过BSSRDF渲染，可以得到非常真实的图片： 布料材质（Cloth） 毛线等材质是由多条纤维缠绕而成的： 而布料是由成束的纤维按照一定的结构编织而成的：</summary></entry><entry><title type="html">计算机图形学（六）——材质与外观（Materials and Appearances）</title><link href="http://localhost:4000/2020/05/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E6%9D%90%E8%B4%A8%E4%B8%8E%E5%A4%96%E8%A7%82.html" rel="alternate" type="text/html" title="计算机图形学（六）——材质与外观（Materials and Appearances）" /><published>2020-05-19T00:00:00+08:00</published><updated>2020-05-19T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E6%9D%90%E8%B4%A8%E4%B8%8E%E5%A4%96%E8%A7%82</id><content type="html" xml:base="http://localhost:4000/2020/05/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E6%9D%90%E8%B4%A8%E4%B8%8E%E5%A4%96%E8%A7%82.html">&lt;h2 id=&quot;材质&quot;&gt;材质&lt;/h2&gt;

&lt;h3 id=&quot;漫反射材质的特性&quot;&gt;漫反射材质的特性&lt;/h3&gt;

&lt;p&gt;渲染过程中表现出的不同特性是由BRDF决定的。BRDF定义的是光打在一点上向四周的辐射的强度。而对于漫反射材质，就是光线打在一个点上，会被均为地反射到半球空间上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519214126212.png&quot; alt=&quot;image-20200519214126212&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图中的左边和右边都是均匀的漫反射材质渲染之后的图片，不同之处在于漫反射的系数不同。所谓漫反射系数，就是在不同通道上的比例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519214342041.png&quot; alt=&quot;image-20200519214342041&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当材质不吸收光的能量且为漫反射，意味着射入的光线强度等于反射的所有光线强度之和。且反射光线强度在半球上均匀分布即$L_i=constant$，BRDF函数$f_r=constant$，与入射角度无关。根据反射模型：
\(\begin{aligned}
L_o(\omega_o)&amp;amp;=\int_{H^2}f_rL_i(\omega_i)\cos\theta_id\omega_i\\
&amp;amp;=f_rL_i\int_{H^2}\cancel{\omega}\cos\theta_id\omega_i\\
&amp;amp;=\pi f_rL_i
\end{aligned}\)
由于入射光线等于反射光线即$L_o==L_i$，所以有$f_r=1/\pi$。&lt;/p&gt;

&lt;p&gt;我们定义一个反射率（albedo）用来定义不同颜色的系数：
\(f_r=\frac{\rho}{\pi}\)&lt;/p&gt;

&lt;h3 id=&quot;高光材质glossy&quot;&gt;高光材质（Glossy）&lt;/h3&gt;

&lt;p&gt;高光材质表面和镜面类似，但由于其表面较粗糙，所以反射光分布在放射方向周围。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519221243517.png&quot; alt=&quot;image-20200519221243517&quot; /&gt;&lt;/p&gt;

&lt;p&gt;高光材质的渲染图片如下图所示，和漫反射一样，通过控制系数可以调整最终呈现的颜色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519221421215.png&quot; alt=&quot;image-20200519221421215&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;半透明材质&quot;&gt;半透明材质&lt;/h3&gt;

&lt;p&gt;半透明材质既有反射也有折射&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519221525303.png&quot; alt=&quot;image-20200519221525303&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图为半透明材质的渲染图，右边的玻璃内实际是有颜色的，这说明光线进入玻璃后多次反射后又射出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519221644181.png&quot; alt=&quot;image-20200519221644181&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;反射&quot;&gt;反射&lt;/h2&gt;

&lt;p&gt;如左图所示，在反射中，入射光与反射光关于法线对称。我们发现入射光和反射光的向量相加会得到
\(\omega_o+\omega_i=2\cos\theta\vec{\bold{n}}=2(\omega_i\cdot\vec{\bold{n}})\vec{\bold{n}}\)
因此反射光的方位角 $\omega_o$ 为：
\(\omega_o=-\omega_i+2(\omega_i\cdot\vec{\bold{n}})\vec{\bold{n}}\)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519221921972.png&quot; alt=&quot;image-20200519221921972&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在俯视角度上，出射的方位角$\Phi_o$与入射方位角$\Phi_i$相差$\pi$，如右图所示。因此俯视角度上的出射角度$\Phi_o$为：
\(\Phi_o=(\Phi_i+\pi)\text{mod}2\pi\)&lt;/p&gt;

&lt;h2 id=&quot;折射&quot;&gt;折射&lt;/h2&gt;

&lt;h3 id=&quot;斯内尔定律snell-law&quot;&gt;斯内尔定律（Snell Law）&lt;/h3&gt;

&lt;p&gt;在折射中，入射角和折射角满足定律：$\eta_i\sin\theta_i=\eta_t\sin\theta_t$。下图右边列出的是多个材质的折射率。真空的折射率为1.0，钻石的折射率为2.42，由于钻石折射率较大，不同波长的光波经过折射后出射角度不同，因此可以看到多种颜色的光。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200519223644830.png&quot; alt=&quot;image-20200519223644830&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出射角的余弦可以计算得到：
\(\begin{aligned}
\cos \theta_{t} &amp;amp;=\sqrt{1-\sin ^{2} \theta_{t}} \\
&amp;amp;=\sqrt{1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2} \sin ^{2} \theta_{i}} \\
&amp;amp;=\sqrt{1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2}\left(1-\cos ^{2} \theta_{i}\right)}
\end{aligned}\)
可以发现只有当$1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2}\left(1-\cos ^{2} \theta_{i}\right)&amp;gt;=0$的时候出射角才有意义。通过分析这个公式可以发现，只有当入射介质的折射率大于出射介质的折射率时才会出现无意义的情况。&lt;/p&gt;

&lt;h3 id=&quot;菲涅耳项fresnel-reflectionterm&quot;&gt;菲涅耳项（Fresnel Reflection/Term）&lt;/h3&gt;

&lt;p&gt;在不同的视角下，反射的效果不同。如下图所示，将一本书竖靠在墙边，当垂直往下看时看不到桌面对书的反射，而平行看的时候，桌面的反射很明显。这说明反射的光能量的多少和光线的入射角度有关。而这可以用菲涅尔项描述。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522203112703.png&quot; alt=&quot;image-20200522203112703&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图就是反射率随入射光和法线的夹角变化的情况，可以看到随着角度接近90度，反射率接近1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522203717679.png&quot; alt=&quot;image-20200522203717679&quot; /&gt;&lt;/p&gt;

&lt;p&gt;菲涅尔项的简化方程：&lt;/p&gt;

&lt;p&gt;\(\begin{aligned}
R(\theta) &amp;amp;=R_{0}+\left(1-R_{0}\right)(1-\cos \theta)^{5} \\
R_{0} &amp;amp;=\left(\frac{n_{1}-n_{2}}{n_{1}+n_{2}}\right)^{2}
\end{aligned}\)
当$\theta-&amp;gt;0, R(\theta)-&amp;gt;0$,当$\theta-&amp;gt;\pi/2, R(\theta)-&amp;gt;1$&lt;/p&gt;

&lt;h2 id=&quot;微表面材质microfacet-material&quot;&gt;微表面材质（Microfacet Material）&lt;/h2&gt;

&lt;p&gt;只要观察点离表面足够远，当我们看向表面的时候，很多微小的东西我们都看不到，看到的是这些微小的东西最终形成的总体效应。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522204635471.png&quot; alt=&quot;image-20200522204635471&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微表面模型假设物体表面是粗糙的，但从远处看是平的，从近处看是凹凸不平的表面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522204908891.png&quot; alt=&quot;image-20200522204908891&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;高光(Glossy )材质：微表面法向方向集中&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522205057007.png&quot; alt=&quot;image-20200522205057007&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;漫反射（diffuse）材质：微表面法向方向分散&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522205153792.png&quot; alt=&quot;image-20200522205153792&quot; /&gt;&lt;/p&gt;

    &lt;h3 id=&quot;微表面材质的数学表述&quot;&gt;微表面材质的数学表述&lt;/h3&gt;

    &lt;p&gt;微表面方程由菲涅尔项、阴影遮挡项、法线分布三个部分组成。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;菲涅尔项$\bold{F(i,h)}$描述观测角度接收的能量大小。&lt;/li&gt;
      &lt;li&gt;阴影遮挡项$\bold{G(i,o,h)}$描述的是由于遮挡关系导致的能量损失，当入射光线几乎平行于表面时，阴影遮挡最容易发生。&lt;/li&gt;
      &lt;li&gt;法线分布$\bold{D(h)}$描述在任意一个方向上法线的分布情况，因为半程向量$\bold{h}$为入射光和观测角度的平分线，所以只有法向为半程向量的平面才会反射到观测角度。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522205310439.png&quot; alt=&quot;image-20200522205310439&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;各向同性各向异性isotropicanisotropic材质&quot;&gt;各向同性/各向异性（Isotropic/Anisotropic）材质&lt;/h2&gt;

&lt;p&gt;各向同性材质表示微表面材质的法线不具有明显的方向性。而各向异性材质表示微表面材质的法线具有明显的方向性&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522211011026.png&quot; alt=&quot;image-20200522211011026&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;brdf的性质&quot;&gt;BRDF的性质&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;非负性
\(f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right) \geq 0\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线性：光线反射分成多块再加合与直接计算得到的结果相同&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

\[L_{r}\left(\mathrm{p}, \omega_{r}\right)=\int_{H^{2}} f_{r}\left(\mathrm{p}, \omega_{i} \rightarrow \omega_{r}\right) L_{i}\left(\mathrm{p}, \omega_{i}\right) \cos \theta_{i} \mathrm{d} \omega_{i}\]

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522212049521.png&quot; alt=&quot;image-20200522212049521&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可逆性&lt;/li&gt;
&lt;/ul&gt;

\[f_{r}\left(\omega_{r} \rightarrow \omega_{i}\right)=f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right)\]

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522212210177.png&quot; alt=&quot;image-20200522212210177&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能量守恒&lt;/li&gt;
&lt;/ul&gt;

\[\forall \omega_{r} \int_{H^{2}} f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right) \cos \theta_{i} \mathrm{d} \omega_{i} \leq 1\]

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;各项同性和各项异性：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;各项同性:BRDF与入射方位角无关即：&lt;/li&gt;
    &lt;/ul&gt;

\[f_{r}\left(\theta_{i}, \phi_{i} , \theta_{r}, \phi_{r}\right)=f_{r}\left(\theta_{i}, \theta_{r}, \phi_{r}-\phi_{i}\right)\]

    &lt;p&gt;又由于可逆性：
\(f_{r}\left(\theta_{i}, \theta_{r}, \phi_{r}-\phi_{i}\right)=f_{r}\left(\theta_{r}, \theta_{i}, \phi_{i}-\phi_{r}\right)=f_{r}\left(\theta_{i}, \theta_{r},\left|\phi_{r}-\phi_{i}\right|\right)\)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;测量brdf&quot;&gt;测量BRDF&lt;/h2&gt;

&lt;p&gt;通过测量可以得到真实的BRDF，给定入射角度和出射角度就可以得到特定的BRDF值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com//blog/2020/05/image-20200522213320359.png&quot; alt=&quot;image-20200522213320359&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于测量设计到4个维度，因此简化测量次数也是一个研究的方向。&lt;/p&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">材质 漫反射材质的特性 渲染过程中表现出的不同特性是由BRDF决定的。BRDF定义的是光打在一点上向四周的辐射的强度。而对于漫反射材质，就是光线打在一个点上，会被均为地反射到半球空间上。 下图中的左边和右边都是均匀的漫反射材质渲染之后的图片，不同之处在于漫反射的系数不同。所谓漫反射系数，就是在不同通道上的比例。 当材质不吸收光的能量且为漫反射，意味着射入的光线强度等于反射的所有光线强度之和。且反射光线强度在半球上均匀分布即$L_i=constant$，BRDF函数$f_r=constant$，与入射角度无关。根据反射模型： \(\begin{aligned} L_o(\omega_o)&amp;amp;=\int_{H^2}f_rL_i(\omega_i)\cos\theta_id\omega_i\\ &amp;amp;=f_rL_i\int_{H^2}\cancel{\omega}\cos\theta_id\omega_i\\ &amp;amp;=\pi f_rL_i \end{aligned}\) 由于入射光线等于反射光线即$L_o==L_i$，所以有$f_r=1/\pi$。 我们定义一个反射率（albedo）用来定义不同颜色的系数： \(f_r=\frac{\rho}{\pi}\) 高光材质（Glossy） 高光材质表面和镜面类似，但由于其表面较粗糙，所以反射光分布在放射方向周围。 高光材质的渲染图片如下图所示，和漫反射一样，通过控制系数可以调整最终呈现的颜色。 半透明材质 半透明材质既有反射也有折射 下图为半透明材质的渲染图，右边的玻璃内实际是有颜色的，这说明光线进入玻璃后多次反射后又射出。 反射 如左图所示，在反射中，入射光与反射光关于法线对称。我们发现入射光和反射光的向量相加会得到 \(\omega_o+\omega_i=2\cos\theta\vec{\bold{n}}=2(\omega_i\cdot\vec{\bold{n}})\vec{\bold{n}}\) 因此反射光的方位角 $\omega_o$ 为： \(\omega_o=-\omega_i+2(\omega_i\cdot\vec{\bold{n}})\vec{\bold{n}}\) 在俯视角度上，出射的方位角$\Phi_o$与入射方位角$\Phi_i$相差$\pi$，如右图所示。因此俯视角度上的出射角度$\Phi_o$为： \(\Phi_o=(\Phi_i+\pi)\text{mod}2\pi\) 折射 斯内尔定律（Snell Law） 在折射中，入射角和折射角满足定律：$\eta_i\sin\theta_i=\eta_t\sin\theta_t$。下图右边列出的是多个材质的折射率。真空的折射率为1.0，钻石的折射率为2.42，由于钻石折射率较大，不同波长的光波经过折射后出射角度不同，因此可以看到多种颜色的光。 出射角的余弦可以计算得到： \(\begin{aligned} \cos \theta_{t} &amp;amp;=\sqrt{1-\sin ^{2} \theta_{t}} \\ &amp;amp;=\sqrt{1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2} \sin ^{2} \theta_{i}} \\ &amp;amp;=\sqrt{1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2}\left(1-\cos ^{2} \theta_{i}\right)} \end{aligned}\) 可以发现只有当$1-\left(\frac{\eta_{i}}{\eta_{t}}\right)^{2}\left(1-\cos ^{2} \theta_{i}\right)&amp;gt;=0$的时候出射角才有意义。通过分析这个公式可以发现，只有当入射介质的折射率大于出射介质的折射率时才会出现无意义的情况。 菲涅耳项（Fresnel Reflection/Term） 在不同的视角下，反射的效果不同。如下图所示，将一本书竖靠在墙边，当垂直往下看时看不到桌面对书的反射，而平行看的时候，桌面的反射很明显。这说明反射的光能量的多少和光线的入射角度有关。而这可以用菲涅尔项描述。 下图就是反射率随入射光和法线的夹角变化的情况，可以看到随着角度接近90度，反射率接近1. 菲涅尔项的简化方程： \(\begin{aligned} R(\theta) &amp;amp;=R_{0}+\left(1-R_{0}\right)(1-\cos \theta)^{5} \\ R_{0} &amp;amp;=\left(\frac{n_{1}-n_{2}}{n_{1}+n_{2}}\right)^{2} \end{aligned}\) 当$\theta-&amp;gt;0, R(\theta)-&amp;gt;0$,当$\theta-&amp;gt;\pi/2, R(\theta)-&amp;gt;1$ 微表面材质（Microfacet Material） 只要观察点离表面足够远，当我们看向表面的时候，很多微小的东西我们都看不到，看到的是这些微小的东西最终形成的总体效应。 微表面模型假设物体表面是粗糙的，但从远处看是平的，从近处看是凹凸不平的表面。 高光(Glossy )材质：微表面法向方向集中 漫反射（diffuse）材质：微表面法向方向分散 微表面材质的数学表述 微表面方程由菲涅尔项、阴影遮挡项、法线分布三个部分组成。 菲涅尔项$\bold{F(i,h)}$描述观测角度接收的能量大小。 阴影遮挡项$\bold{G(i,o,h)}$描述的是由于遮挡关系导致的能量损失，当入射光线几乎平行于表面时，阴影遮挡最容易发生。 法线分布$\bold{D(h)}$描述在任意一个方向上法线的分布情况，因为半程向量$\bold{h}$为入射光和观测角度的平分线，所以只有法向为半程向量的平面才会反射到观测角度。 各向同性/各向异性（Isotropic/Anisotropic）材质 各向同性材质表示微表面材质的法线不具有明显的方向性。而各向异性材质表示微表面材质的法线具有明显的方向性 BRDF的性质 非负性 \(f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right) \geq 0\) 线性：光线反射分成多块再加合与直接计算得到的结果相同 \[L_{r}\left(\mathrm{p}, \omega_{r}\right)=\int_{H^{2}} f_{r}\left(\mathrm{p}, \omega_{i} \rightarrow \omega_{r}\right) L_{i}\left(\mathrm{p}, \omega_{i}\right) \cos \theta_{i} \mathrm{d} \omega_{i}\] 可逆性 \[f_{r}\left(\omega_{r} \rightarrow \omega_{i}\right)=f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right)\] 能量守恒 \[\forall \omega_{r} \int_{H^{2}} f_{r}\left(\omega_{i} \rightarrow \omega_{r}\right) \cos \theta_{i} \mathrm{d} \omega_{i} \leq 1\] 各项同性和各项异性： 各项同性:BRDF与入射方位角无关即： \[f_{r}\left(\theta_{i}, \phi_{i} , \theta_{r}, \phi_{r}\right)=f_{r}\left(\theta_{i}, \theta_{r}, \phi_{r}-\phi_{i}\right)\] 又由于可逆性： \(f_{r}\left(\theta_{i}, \theta_{r}, \phi_{r}-\phi_{i}\right)=f_{r}\left(\theta_{r}, \theta_{i}, \phi_{i}-\phi_{r}\right)=f_{r}\left(\theta_{i}, \theta_{r},\left|\phi_{r}-\phi_{i}\right|\right)\) 测量BRDF 通过测量可以得到真实的BRDF，给定入射角度和出射角度就可以得到特定的BRDF值。 由于测量设计到4个维度，因此简化测量次数也是一个研究的方向。</summary></entry><entry><title type="html">WSL环境用VSCode调试C++代码</title><link href="http://localhost:4000/2020/05/16/WSL%E7%8E%AF%E5%A2%83%E7%94%A8VSCode%E8%B0%83%E8%AF%95C++%E4%BB%A3%E7%A0%81.html" rel="alternate" type="text/html" title="WSL环境用VSCode调试C++代码" /><published>2020-05-16T00:00:00+08:00</published><updated>2020-05-16T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/16/WSL%E7%8E%AF%E5%A2%83%E7%94%A8VSCode%E8%B0%83%E8%AF%95C++%E4%BB%A3%E7%A0%81</id><content type="html" xml:base="http://localhost:4000/2020/05/16/WSL%E7%8E%AF%E5%A2%83%E7%94%A8VSCode%E8%B0%83%E8%AF%95C++%E4%BB%A3%E7%A0%81.html">&lt;h3 id=&quot;wsl是是由微软与-canonical-公司合作开发的-windows-子系统在wsl环境中需要对vscode进行配置才能调试c程序&quot;&gt;WSL是是由微软与 Canonical 公司合作开发的 Windows 子系统，在WSL环境中，需要对VSCODE进行配置才能调试C++程序&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先VSCode需要安装C/C++拓展插件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;调试&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;添加配置&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;C++(GDB/LLDB)&lt;/code&gt;, 将生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt;替换为以下内容:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ 
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;(gdb) Bash on Windows Launch&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;/mnt/c/C++Projects/test/a.out(注意修改)&quot;,
            &quot;args&quot;: [],
            &quot;stopAtEntry&quot;: false,
            &quot;miDebuggerArgs&quot;: &quot;&quot;,
            &quot;cwd&quot;: &quot;/mnt/c/C++Projects/test/(注意修改)&quot;,
            &quot;environment&quot;: [],
            &quot;externalConsole&quot;: false,
            &quot;sourceFileMap&quot;: {
                &quot;/mnt/c/&quot;: &quot;C:\\&quot;
            },
            &quot;pipeTransport&quot;: {
                &quot;debuggerPath&quot;: &quot;/usr/bin/gdb&quot;,
                &quot;pipeProgram&quot;: &quot;${env:windir}\\system32\\bash.exe&quot;,
                &quot;pipeArgs&quot;: [
                    &quot;-c&quot;
                ],
                &quot;pipeCwd&quot;: &quot;&quot;
            },
            &quot;setupCommands&quot;: [
                {
                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                    &quot;ignoreFailures&quot;: true
                }
            ]
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;参数&quot;&gt;参数：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;program&lt;/code&gt; : 被调试的可执行文件.需要修改&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sourceFileMap&lt;/code&gt; : 由 wsl 到的 windows 的目录映射.如果test.c不在C盘需要修改&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt; : 可执行文件的运行目录.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stopAtEntry&lt;/code&gt; : 是否在main函数起点暂停. args : 可执行文件的参数.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;调试&quot;&gt;调试&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果是在终端使用gcc编译：  启动终端, 输入 bash 进入wsl, 运行 gcc -g test.c , -g 选项开启调试模式.&lt;/li&gt;
  &lt;li&gt;如果是使用CMake进行编译，在CMakeLists.txt设置调试选项&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)
SET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb&quot;)
SET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV{CXXFLAGS} -O3 -Wall&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>XPX</name></author><category term="环境配置" /><summary type="html">WSL是是由微软与 Canonical 公司合作开发的 Windows 子系统，在WSL环境中，需要对VSCODE进行配置才能调试C++程序 首先VSCode需要安装C/C++拓展插件 选择 调试 -&amp;gt; 添加配置 -&amp;gt; C++(GDB/LLDB), 将生成的launch.json替换为以下内容: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;(gdb) Bash on Windows Launch&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;/mnt/c/C++Projects/test/a.out(注意修改)&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;miDebuggerArgs&quot;: &quot;&quot;, &quot;cwd&quot;: &quot;/mnt/c/C++Projects/test/(注意修改)&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: false, &quot;sourceFileMap&quot;: { &quot;/mnt/c/&quot;: &quot;C:\\&quot; }, &quot;pipeTransport&quot;: { &quot;debuggerPath&quot;: &quot;/usr/bin/gdb&quot;, &quot;pipeProgram&quot;: &quot;${env:windir}\\system32\\bash.exe&quot;, &quot;pipeArgs&quot;: [ &quot;-c&quot; ], &quot;pipeCwd&quot;: &quot;&quot; }, &quot;setupCommands&quot;: [ { &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true } ] }, ] } 参数： program : 被调试的可执行文件.需要修改 sourceFileMap : 由 wsl 到的 windows 的目录映射.如果test.c不在C盘需要修改 cwd : 可执行文件的运行目录. stopAtEntry : 是否在main函数起点暂停. args : 可执行文件的参数. 调试 如果是在终端使用gcc编译： 启动终端, 输入 bash 进入wsl, 运行 gcc -g test.c , -g 选项开启调试模式. 如果是使用CMake进行编译，在CMakeLists.txt设置调试选项 SET(CMAKE_BUILD_TYPE &quot;Debug&quot;) SET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb&quot;) SET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV{CXXFLAGS} -O3 -Wall&quot;)</summary></entry><entry><title type="html">计算机图形学（五）——光线追踪（Ray Tracing）</title><link href="http://localhost:4000/2020/04/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA.html" rel="alternate" type="text/html" title="计算机图形学（五）——光线追踪（Ray Tracing）" /><published>2020-04-28T00:00:00+08:00</published><updated>2020-04-28T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA</id><content type="html" xml:base="http://localhost:4000/2020/04/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA.html">&lt;h1 id=&quot;光线追踪&quot;&gt;光线追踪&lt;/h1&gt;

&lt;h2 id=&quot;为什么需要光线追踪&quot;&gt;为什么需要光线追踪&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;光栅化不能很好地处理一些全局效果：
    &lt;ul&gt;
      &lt;li&gt;软阴影（Soft shadows）&lt;/li&gt;
      &lt;li&gt;光线反射不止一次的情况,如在光滑表面的反射&lt;/li&gt;
      &lt;li&gt;间接光照&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;光栅化速度快，但生成质量较低&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing.png&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;基本假设&quot;&gt;基本假设&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;光是沿直线传播的&lt;/li&gt;
  &lt;li&gt;光线互相交叉时不会发生影响&lt;/li&gt;
  &lt;li&gt;从光源到人眼的光路是可逆的&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;光线投射方法ray-casting&quot;&gt;光线投射方法（Ray Casting）&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;从每一像素投射一条光线到物体上的一点&lt;/li&gt;
  &lt;li&gt;将该点和光源连线，判断该点是否能够直接到达光源而不受到阻挡，如果可以则表示该点不在阴影中。&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_casting.png&quot; height=&quot;150&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;这种方法只能投射一次，因此只适用于Billin Phong模型。&lt;/p&gt;

&lt;h2 id=&quot;递归whitted-style光线追踪&quot;&gt;递归（Whitted-Style）光线追踪&lt;/h2&gt;

&lt;p&gt;与光线投射不同的地方，该模型假设光线进行完美的反射，打到表面上时有一部分反射、一部分折射。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-whitted_ray_tracing.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;对于每一个反射和折射的点，都会判断是否能够直接连接到光源，并将所有的能量累加。如下图该点的像素等于光线折射处的能量加上反射时的能量。由于光线反射和折射满足能量之和为1，因此不会出现累加之后变亮的情况。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-whitted_ray_tracing1.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;h3 id=&quot;光线和表面相交&quot;&gt;光线和表面相交&lt;/h3&gt;

&lt;h4 id=&quot;光线方程&quot;&gt;光线方程&lt;/h4&gt;

&lt;p&gt;光线可以用$\mathbf{r}(t)=\mathbf{o}+t\mathbf{d}$表示。&lt;/p&gt;

&lt;h4 id=&quot;隐式表面&quot;&gt;隐式表面&lt;/h4&gt;
&lt;h5 id=&quot;光线和球的交点&quot;&gt;光线和球的交点&lt;/h5&gt;

&lt;p&gt;球的表示方程为：$(\mathbf{p}-\mathbf{c})^2 - R^2=0 $。&lt;/p&gt;

&lt;p&gt;我们将光线方程代入球的方程：&lt;/p&gt;

\[(\mathbf{o}+t\mathbf{d}-\mathbf{c})^2-R^2=0\]

&lt;p&gt;化简得到：&lt;/p&gt;

\[at^2+bt+c=0\]

&lt;p&gt;其中， $a=\mathbf{d}\cdot\mathbf{d}$，$b=2(\mathbf{o}-\mathbf{c})\cdot\mathbf{d}$，$c=(\mathbf{o}-\mathbf{c})\cdot(\mathbf{o}-\mathbf{c})-R^2$。可以计算t：&lt;/p&gt;

\[t=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\]

&lt;h5 id=&quot;一般的隐式表面&quot;&gt;一般的隐式表面&lt;/h5&gt;

&lt;p&gt;对于一般的隐式方程：$f(\mathbf{o}+t\mathbf{d})=0$代入光线方程都可以用解析的方式或数值的方式计算得到解。&lt;/p&gt;

&lt;h4 id=&quot;显式表面&quot;&gt;显式表面&lt;/h4&gt;

&lt;h5 id=&quot;三角形&quot;&gt;三角形&lt;/h5&gt;

&lt;p&gt;判断光线在三角形的表面上的位置：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;计算光线和三角形所在平面的交点&lt;/li&gt;
  &lt;li&gt;判断交点是否在三角形内部&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;平面的定义&quot;&gt;平面的定义&lt;/h5&gt;

&lt;p&gt;平面可以用公式：$(\mathbf{p}-\mathbf{p}’)\cdot\mathbf{N}=0$表示，意义为空间中一点与平面上的一点连线，如果和平面法向量的点积为0，则该点在平面上。&lt;/p&gt;

&lt;p&gt;将直线方程代入平面:&lt;/p&gt;

\[(\mathbf{p}-\mathbf{p}')\cdot\mathbf{N}=(\mathbf{o}+t\mathbf{d}-\mathbf{p}')\cdot\mathbf{N}=0\]

&lt;p&gt;就可以很容易地得到t。&lt;/p&gt;

&lt;h5 id=&quot;moller-trumbore-算法&quot;&gt;Moller Trumbore 算法&lt;/h5&gt;

&lt;p&gt;该算法能够之间判断点是否在三角形平面内，原理是计算空间中的一点是否可以用三角形的三个点线性表示。参数$t,b_1,b_2$可以用Cramer法则计算。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-whitted_ray_tracing2.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;h3 id=&quot;光线与表面求交&quot;&gt;光线与表面求交&lt;/h3&gt;

&lt;h4 id=&quot;包围体积方法bounding-volumes&quot;&gt;包围体积方法（Bounding Volumes）&lt;/h4&gt;

&lt;p&gt;在我们上面介绍的方法中，每判断一条光线与模型的交点，就要遍历所有的模型表面才能知道光线和模型的交点。&lt;/p&gt;

&lt;p&gt;为了加速光线求交方法，引入了包围盒的概念。所谓包围盒就是将模型包围起来的长方体盒子。我们只需要计算光线和包围盒的交点。&lt;/p&gt;

&lt;h4 id=&quot;axis-aligned-bounding-boxaabb&quot;&gt;Axis-Aligned Bounding Box（AABB）&lt;/h4&gt;

&lt;p&gt;包围盒可以理解为三组平行的平面围成的体积。为了简化包围盒的形式，我们将包围盒的边设置为与坐标轴对齐。
这样的好处是在计算光线和平面的交点时只需要考虑平面法线方向的分量，而当平面与坐标轴对齐时其法线与坐标轴平行，因此只需要取光线的一个轴的分量即可。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-bounding_volume.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;在计算光线和盒子的交点时可以分别算光线和三组平面的交点。我们用二维情况举例，如下图所示，光线先和x平面计算交点得到x平面的$t_min$和$t_max$；在和y平面计算交点得到y平面的$t_min$和$t_max$。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-bounding_volume1.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;我们计算在所有平面中的$t_min$和$t_max$。通过总结规律可以发现：&lt;strong&gt;当光线进入所有平面后才算进入包围盒内，只要光线从任意一个平面出来则光线从包围盒射出&lt;/strong&gt;。因此进入的时间为$t_{enter}=max({t_{min}})$，出去的时间为$t_{exit}=min({t_{max}})$。只要$t_{enter} &amp;lt; t_{exit}$则表示光线在包围盒内一段时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当$t_{exit}&amp;lt;0$时，则表示盒子在光线背面，因此没有相交&lt;/li&gt;
  &lt;li&gt;当$t_{exit}&amp;lt;0 ~ \&amp;amp;\&amp;amp; ~ t_{enter} &amp;lt; 0$时，光线在盒子内，必定有交点。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此最终的结论为：&lt;/p&gt;

&lt;p&gt;光线和AABB有交点，当且仅当$t_{enter} &amp;lt; t_{exit} ~ \&amp;amp;\&amp;amp; ~ t_{exit}&amp;gt;=0$&lt;/p&gt;

&lt;h3 id=&quot;光线与物体求交&quot;&gt;光线与物体求交&lt;/h3&gt;

&lt;h4 id=&quot;均匀网格求交-uniform-grid&quot;&gt;均匀网格求交 Uniform grid&lt;/h4&gt;

&lt;p&gt;我们将模型简化为2维情况：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;首先计算所有物体的最小AABB&lt;/li&gt;
  &lt;li&gt;再将包围盒平均划分为更小的区域&lt;/li&gt;
  &lt;li&gt;从光线的起点出发，沿光线方向遍历方块，判断方块内是否有物体以及光线是否与物体相交。&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-whitted_ray_tracing3.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：该方法适用于物体排列均匀的场景，而不适用于不均匀的场景。这是因为如果物体分布不均匀，建模使用的格子数量非常大，速度很慢。如下图所示,上方的场景比下方更适合使用均匀网格求交。&lt;/p&gt;
&lt;center&gt;
&lt;table&gt;&lt;tr&gt;
&lt;table&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-uniform_grid1.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/table&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-uniform_grid2.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;其实所有判断光线和物体求交的方法的基本思路与上面相同，但区别在于网格空间的划分上。&lt;/p&gt;

&lt;h4 id=&quot;空间划分方法&quot;&gt;空间划分方法&lt;/h4&gt;

&lt;p&gt;常用的空间数据结构有八叉树（Oct-Tree），KD树（KD-Tree）和BSP-Tree。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oct-Tree每次沿&lt;strong&gt;x,y,z轴&lt;/strong&gt;将空间划分为&lt;strong&gt;大小相同的八份&lt;/strong&gt;，并根据每个子空间内的物体数量判断是否继续划分。&lt;/li&gt;
  &lt;li&gt;KD-Tree 每次根据物体的分布情况&lt;strong&gt;沿一个轴&lt;/strong&gt;将空间&lt;strong&gt;划分为两份&lt;/strong&gt;，并根据每个子空间内的物体数量判断是否继续划分。&lt;/li&gt;
  &lt;li&gt;BSP-Tree每次根据物体的分布情况&lt;strong&gt;沿任意角度&lt;/strong&gt;将空间&lt;strong&gt;划分为两份&lt;/strong&gt;，并根据每个子空间内的物体数量判断是否继续划分。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-spatial_partition.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;h5 id=&quot;特点&quot;&gt;特点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Oct-Tree 由于每次需要划分八个空间，在空间比较分散时格子数量也会很多&lt;/li&gt;
  &lt;li&gt;KD-Tree 每次只划分两部分，所以格子数量较少&lt;/li&gt;
  &lt;li&gt;BSP-Tree 由于没有沿坐标轴切割，所以求交时很复杂。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kd-tree的求交&quot;&gt;KD-Tree的求交&lt;/h4&gt;

&lt;p&gt;一个构建好的KD-Tree具有下图右方的结构。光线和物体求交步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;光线与与父节点求交&lt;/li&gt;
  &lt;li&gt;如果有交点，分别判断光线与A的两个子节点是否相交&lt;/li&gt;
  &lt;li&gt;如果子节点与光线相交且子节点为叶子节点，则判断该空间内的物体是否与光线相交。如果子节点与光线相交但子节点不是叶子节点，则继续步骤1的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-kd_tree.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;h5 id=&quot;kd-tree求交方法特点&quot;&gt;KD-Tree求交方法特点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;相比均匀网格的求交方法，KD-Tree的求交方法更加高效&lt;/li&gt;
  &lt;li&gt;KD-Tree方法以及均匀网格等空间划分方法都会&lt;strong&gt;面临需要判断空间与物体表面是否相交的问题&lt;/strong&gt;。对于一个横跨多个包围盒的物体，在KD-Tree中会被计算多次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;物体划分方法object-partition&quot;&gt;物体划分方法（Object Partition）&lt;/h4&gt;

&lt;p&gt;物体划分方法的优点是避免了空间划分方法出现的包围盒与物体相交的问题。在物体划分中，包围盒是根据物体集合确定的，并且不会出现一个物体划分多次的情况。&lt;/p&gt;

&lt;h5 id=&quot;包围体积结构bounding-volume-hierarchy&quot;&gt;包围体积结构（Bounding Volume Hierarchy）&lt;/h5&gt;

&lt;p&gt;BVH的构建方法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;计算物体集合的包围盒&lt;/li&gt;
  &lt;li&gt;将集合分割为两个物体子集，分割的基本原则是：
    &lt;ol&gt;
      &lt;li&gt;一直选择最长的轴&lt;/li&gt;
      &lt;li&gt;从物体集合的中位分割&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;重新计算两个子集的包围盒，当子集满足一定的数量条件时不再划分，并保存该子集。&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-bounding_volume_hierarchy.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;BVH的求交与KD-Tree的求交逻辑基本相同。&lt;/p&gt;

&lt;h5 id=&quot;基于表面积的启发式评估划分方法surface-area-heuristicsah&quot;&gt;基于表面积的启发式评估划分方法（Surface Area Heuristic，SAH）&lt;/h5&gt;

&lt;p&gt;当如下图所示，图元分布不均匀的时候，使用中位分割的方法会容易出现区域重叠的情况，这种情况导致当光线穿过重叠区域时，需要同时遍历两个集合内的子集，增加了计算量。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-bounding_volume_hierarchy1.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;更好的方法是基于表面积的启发式评估划分方法（Surface Area Heuristic，SAH），这种方法通过对求交代价和遍历代价进行评估，给出了每一种划分的代价（Cost），而我们的目的便是去寻找代价最小的划分。&lt;/p&gt;

&lt;p&gt;假设当前节点的包围体中存在$n$个物体，设对每一个物体求交的代价为 $t(i)$ ，如果不做划分依次对其求交则总的代价为：&lt;/p&gt;

\[\sum t(i)=t(1)+t(2)+\cdots + t(n)\]

&lt;p&gt;如果这些物体划分为2组，这两组物体分别处于它们的包围盒A和B中。设光线击中它们的概率分别为 $p(A)$ 和 $p(B)$, 由于包围盒$A$和包围盒$B$之间存在重叠，且它们并不一定会填满其父节点的包围体，因此$p(A)$ 和 $p(B)$ 的和不一定为1，且它们的和越大说明包围盒$A$和包围盒$B$的重叠程度越大。综上所述，当前节点求交的代价可以写为：&lt;/p&gt;

\[c(A,B)=p(A)\sum_{i \in A} t(i)+p(B)\sum_{j \in B} t(j) + t_{trav}\]

&lt;p&gt;其中$t_{trav}$表示遍历树状结构的代价。一般来说，我们假设对所有图元的求交代价是相同的，可设 $t(i)=1$，又遍历的代价小于求交的代价，可设 $t_{trav}=0.125$ 。设包围盒A中图元的个数为 $a$ ，B中图元的个数为$b$ ，则：&lt;/p&gt;

\[c(A,B)=p(A)a+p(B)b + 0.125\]

&lt;p&gt;光线击中包围盒的概率可以根据包围体的表面积来估计，即在父节点的包围体C中，A和B的表面积越大它们被击中的概率也就越大，设 $A$ ， $B$ 和 $C$ 的表面积为$S(A)$ ，$S(B)$ 和 $S(C)$ ，则有：&lt;/p&gt;

\[c(A,B)=\frac{p(A)}{S(C)}a+\frac{p(B)}{S(C)}b + 0.125\]

&lt;p&gt;在实现的时候，相比于计算可能划分的代价然后寻找代价最小的划分，一种更好的办法是将节点$C$所包围的空间沿着跨度最长的那个坐标轴的方向将空间均等的划分为若干个桶（Buckets）,划分只会出现在桶与桶之间的位置上。如图所示，若桶的个数为n则只会有n-1种划分的可能。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-bounding_volume_hierarchy2.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;设图元质心在划分坐标轴上位置坐标的分量为$t$ ，则该图元所处桶的索引号为：&lt;/p&gt;

\[i=Clamp(int(\frac{t-t_{min}}{t_{max}-t_{min}}n), 0, n-1)\]

&lt;p&gt;遍历$C$中所有的图元，统计每一个桶中图元的个数以及每一个桶的包围盒。注意，桶与桶之间存在重叠。得到这些信息后，就能计算每一种划分的代价：&lt;/p&gt;

\[c(A, B)=\sum_{i&amp;lt;m i d} n_{i} \frac{\bigcup_{i&amp;lt;m i d} S(i)}{S(C)}+\sum_{j \geq m i d} n_{j} \frac{U_{j \geq m i d} S(j)}{S(C)}+t_{t r a v}, m i d \in[1, n]\]

&lt;p&gt;需要注意的是，若当前所有图元质心的位置都相同，则直接建立一个叶节点，该叶节点直接包含这些质心位置相同的图元。&lt;/p&gt;

&lt;h3 id=&quot;辐射度量学&quot;&gt;辐射度量学&lt;/h3&gt;

&lt;h5 id=&quot;能量energy&quot;&gt;能量（Energy）&lt;/h5&gt;

&lt;p&gt;$Q[J=Joule]$焦耳&lt;/p&gt;

&lt;h5 id=&quot;功率powerflux&quot;&gt;功率（Power、Flux）&lt;/h5&gt;

&lt;p&gt;功率表示的是单位时间内发射或接收的能量&lt;/p&gt;

&lt;p&gt;$\Phi=\frac{dQ}{dt}[W=Watt][text{lm=lumen}]$ 瓦特，流明&lt;/p&gt;

&lt;h5 id=&quot;辐射强度radiante-intensity&quot;&gt;辐射强度（Radiante Intensity）&lt;/h5&gt;

&lt;p&gt;辐射强度表示一个光源发射的单位立体角的功率&lt;/p&gt;

&lt;p&gt;\(I(\omega)=\frac{d\Phi}{d\omega}\)
\([\frac{W}{sr}][\frac{lm}{sr}=\text{cd=candela}]\)&lt;/p&gt;

&lt;p&gt;立体角表示的是球的表面面积与半径平方的比值，在微分情况下$d\omega$如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;对于一个向周围均匀辐射的点光源，它的辐射强度为&lt;/em&gt;&lt;/p&gt;

\[I=\frac{\Phi}{4\pi}\]

&lt;p&gt;在传播过程中，不考虑衰减的情况，光源的辐射强度是不会变化的。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-radiant_intensity.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;h5 id=&quot;辐照度辐射通量密度irradiance&quot;&gt;辐照度、辐射通量密度（Irradiance）&lt;/h5&gt;
&lt;p&gt;辐照度表示单位时间每一单位面积的表面接收的能量,&lt;em&gt;注意表面应该与光线方向垂直，如果不垂直应该将表面投影到垂直方向。&lt;/em&gt;&lt;/p&gt;

\[E(x)=\frac{d\Phi(x)}{dAcos\theta}\]

\[[\frac{W}{m^2}][\frac{lm}{m^2}=\text{lux}]\]

&lt;p&gt;&lt;em&gt;对于一个向周围均匀辐射的点光源，它的辐射通量密度和半径平方成反比:&lt;/em&gt;&lt;/p&gt;

\[E(x)=\frac{\Phi(x)}{4\pi R^2}\]

&lt;h5 id=&quot;光线radiance&quot;&gt;光线（Radiance）&lt;/h5&gt;

&lt;p&gt;光线表示的是单位立体角、单位面积发射、反射、折射或者接收的能量&lt;/p&gt;

\[\begin{aligned}
L(p,\omega)&amp;amp;\equiv\frac{d^2\Phi(p,\omega)}{d\omega dAcos\theta}\\
&amp;amp;\equiv \frac{dE(p)}{d\omega cos\theta} \\
&amp;amp;\equiv \frac{dI(\omega)}{dAcos\theta}
\end{aligned}\]

&lt;p&gt;下图表示的是表面的辐射通量密度（Irradiance）等于所有立体角上的Radiance之和。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-radiance.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;## 双向反射分布函数（Bidirectional Reflectance Distribution Function）(BRDF)&lt;/p&gt;

&lt;p&gt;对于一个反射过程可以用下图描述：入射在单位面积上的能量为$dE(\omega_i)$，单位立体角的反射能量为$dL_r(x,\omega_r)$。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-brdf.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;物体表面在接收到辐射之后会向四面八方辐射能量，但由于表面的属性不同，在不同的反射角度上辐射的强度也不相同。BRDF就是用于定义在不同角度上反射光线强度的比例。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-brdf1.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;对于观察者而言，四面八方的光线都会照射在某一固定表面，同时该表面会向观察位置所在方向发射光线。如下图示意，对某一位置的所有入射光线积分，并乘以固定反射角度的反射分布函数。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-brdf2.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;如果物体本身会发光，则需要把放光的Radiance加上：&lt;/p&gt;

\[L_o(p,\omega_o)=L_e(p,\omega_o)+\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)d\omega_i\]

&lt;h2 id=&quot;光线追踪ray-tracing&quot;&gt;光线追踪(Ray Tracing)&lt;/h2&gt;

&lt;h3 id=&quot;蒙特卡洛积分monte-carlo-integrate&quot;&gt;蒙特卡洛积分(Monte Carlo Integrate)&lt;/h3&gt;

&lt;p&gt;蒙特卡洛积分是用于解决定积分的问题，如果一个函数十分复杂，没有办法使用解析的方法积分得到。蒙特卡洛积分提供了一种数值的方法计算定积分。&lt;/p&gt;

&lt;p&gt;对于$f(x)$在（a,b）的积分：$\int_a^bf(x)dx$&lt;/p&gt;

&lt;p&gt;在区间（a,b）之间随机采样,$X_i$满足分布：$X_i \sim p(x)$&lt;/p&gt;

&lt;p&gt;在经过N次采样之后，根据蒙特卡洛估计，积分可以近似为&lt;/p&gt;

\[F_N=\frac{1}{N}\sum_{i=1}^N\frac{f(X_i)}{p(X_i)}\]

&lt;p&gt;当在区间（a,b）平均采样时,该方法得到的值就近似于对$f(x)$定积分的估计。&lt;/p&gt;

&lt;p&gt;$X_i \sim p(x)=C$，且$\int_a^bp(x)dx=1$&lt;/p&gt;

&lt;p&gt;可以得到$\int_a^bCdx=1$，所以$C=\frac{1}{b-a}$&lt;/p&gt;

&lt;p&gt;因此，对于$f(x)$在（a,b）的积分$\int_a^bf(x)dx$的蒙特卡洛估计为：&lt;/p&gt;

\[F_N=\frac{b-a}{N}\sum_{i=1}^Nf(X_i)\]

&lt;h3 id=&quot;光线追踪相比递归whitted-style光线追踪&quot;&gt;光线追踪相比递归（Whitted-Style）光线追踪&lt;/h3&gt;

&lt;h4 id=&quot;递归whitted-style光线追踪的特点&quot;&gt;递归（Whitted-Style）光线追踪的特点&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;当光线打在玻璃表面时，会发生折射和反射&lt;/li&gt;
  &lt;li&gt;当打在漫反射表面时，会停止反射&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;光线追踪解决的问题&quot;&gt;光线追踪解决的问题&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;对于磨砂表面，即既有反射又有漫反射的表面，如下图1的犹他壶&lt;/li&gt;
  &lt;li&gt;全局光照中，漫反射物体之间的光线反射，如下图2右边应用全局光照后房间内的长方体靠近墙壁的表面会被染成墙壁的颜色，并且天花板也会变亮。这与实际情况是相同的。&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
&lt;table&gt;&lt;tr&gt;
&lt;table&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing1.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/table&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing2.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;h3 id=&quot;蒙特卡洛方法用于光线追踪&quot;&gt;蒙特卡洛方法用于光线追踪&lt;/h3&gt;

&lt;p&gt;我们观测到的表面一个点的光是来自四面八方打在该点的光反射得到的。对于该点，入射的光线方向分布在指向该点的半球上，如下图所示。所以我们可以使用蒙特卡洛积分方法，将随机变量限制在半球范围内对光线进行积分。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing3.png&quot; height=&quot;200&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;我们假设随机变量满足均匀分布，对于一个单位半径的球面，其面积的一半为$2\pi$,所以变量满足概率密度函数：$p(\omega_i)=1/2\pi$.&lt;/p&gt;

&lt;p&gt;可以得到蒙特卡洛积分为：&lt;/p&gt;

\[\begin{aligned}
L_o(p,\omega_o)&amp;amp;=\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)d\omega_i \\
&amp;amp;=\frac{1}{N}\sum_{i=1}^N\frac{L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)}{p(\omega_i)}\\
&amp;amp;=\frac{2\pi}{N}\sum_{i=1}^NL_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)
\end{aligned}\]

&lt;p&gt;我们将一次反射扩大到多次反射，如下图所示，我们可以将第一次光照的入射光作为第二次光照的反射光，形成递归的形式。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing4.png&quot; height=&quot;200&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;在反射次数增加到m时，根据递归方法，计算的次数增加到$N^m$次。计算复杂度为指数级别，这是硬件无法接受的。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing5.png&quot; height=&quot;200&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;为了解决这个问题，我们每次只采样一次，即N=1。&lt;/p&gt;

&lt;p&gt;采样一次会带来很大的噪声，解决办法就是在一个像素上生成多条的路径，再将所有路径的光线求平均，如下图所示：&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing6.png&quot; height=&quot;200&quot; /&gt; 
&lt;/center&gt;

&lt;h3 id=&quot;俄罗斯轮盘赌用于解决光线追踪次数问题&quot;&gt;俄罗斯轮盘赌用于解决光线追踪次数问题&lt;/h3&gt;

&lt;p&gt;在现实中，光线的反射次数是无限的。单我们在计算时不可能将光线计算无数次，这样就会导致光线的一部分能量损失掉，直观的感受就是画面会变暗。而俄罗斯轮盘赌可以解决光线追踪次数的问题。&lt;/p&gt;

&lt;h4 id=&quot;俄罗斯轮盘赌russian-roulette&quot;&gt;俄罗斯轮盘赌（Russian Roulette）&lt;/h4&gt;

&lt;p&gt;往一个可以装6发子弹的左轮手枪中装入两发子弹，然后转动手枪轮盘。扣动扳机，射出子弹的概率为$P=\frac{1}{3}$。我们用俄罗斯轮盘赌的方式决定光线是否继续往下追踪。&lt;/p&gt;

&lt;p&gt;初始时设置一个概率$P$,在反射时，有$P$的概率发射一条光线，并返回的着色数值为$L_o/P$；有$1-P$的概率不发射光线，则对应的着色数值为0。最终着色的期望为：&lt;/p&gt;

\[E=P*(L_o/P)+(1-P)*0=L_o\]

&lt;p&gt;可以发现期望和真实的光线着色一致。&lt;/p&gt;

&lt;h3 id=&quot;区域采样提高光线追踪效率&quot;&gt;区域采样提高光线追踪效率&lt;/h3&gt;

&lt;p&gt;通过上述的方法，我们可以对像素多次采样，并使用俄罗斯轮盘赌的方法得到期望为真实值的光线着色值。下图为单个像素低采样数和高采样数得到的渲染图片对比。可以发现低采样数的图片会出现很多噪点。这是由于光线向半球平均采样的问题。实际中，我们需要对光源角度着重采样。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing7.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;我们可以重新设置蒙特卡洛采样的概率密度函数，着重对光源区域采样。原本的采样单元为立体角，现在我们需要将采样单元转换为光源区域的面积。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing8.png&quot; height=&quot;300&quot; /&gt; 
&lt;/center&gt;

&lt;p&gt;通过上图示意，可以得到区域到立体角的转换：&lt;/p&gt;

\[d\omega=\frac{dA\cos\theta'}{\lVert x'-x\rVert^2}\]

&lt;p&gt;因此渲染方程可以重写为:&lt;/p&gt;

\[\begin{aligned}
L_o(p,\omega_o)&amp;amp;=\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos\omega_i d\omega_i    \\
&amp;amp;=\int_{A}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\frac{\cos\theta\cos\theta'}{\lVert x'-x\rVert^2}dA
\end{aligned}\]

&lt;p&gt;我们在光源采样时同时还需要对周围环境采样，对于对光源采样部分，不需要考虑俄罗斯轮盘赌。而对周围环境采样时，则需要考虑俄罗斯轮盘赌。&lt;/p&gt;

&lt;p&gt;此外，在对光源采样时还需要考虑遮挡的问题，只对没有遮挡的光源计算着色。&lt;/p&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">光线追踪 为什么需要光线追踪 光栅化不能很好地处理一些全局效果： 软阴影（Soft shadows） 光线反射不止一次的情况,如在光滑表面的反射 间接光照 光栅化速度快，但生成质量较低 基本假设 光是沿直线传播的 光线互相交叉时不会发生影响 从光源到人眼的光路是可逆的 光线投射方法（Ray Casting） 从每一像素投射一条光线到物体上的一点 将该点和光源连线，判断该点是否能够直接到达光源而不受到阻挡，如果可以则表示该点不在阴影中。 这种方法只能投射一次，因此只适用于Billin Phong模型。 递归（Whitted-Style）光线追踪 与光线投射不同的地方，该模型假设光线进行完美的反射，打到表面上时有一部分反射、一部分折射。 对于每一个反射和折射的点，都会判断是否能够直接连接到光源，并将所有的能量累加。如下图该点的像素等于光线折射处的能量加上反射时的能量。由于光线反射和折射满足能量之和为1，因此不会出现累加之后变亮的情况。 光线和表面相交 光线方程 光线可以用$\mathbf{r}(t)=\mathbf{o}+t\mathbf{d}$表示。 隐式表面 光线和球的交点 球的表示方程为：$(\mathbf{p}-\mathbf{c})^2 - R^2=0 $。 我们将光线方程代入球的方程： \[(\mathbf{o}+t\mathbf{d}-\mathbf{c})^2-R^2=0\] 化简得到： \[at^2+bt+c=0\] 其中， $a=\mathbf{d}\cdot\mathbf{d}$，$b=2(\mathbf{o}-\mathbf{c})\cdot\mathbf{d}$，$c=(\mathbf{o}-\mathbf{c})\cdot(\mathbf{o}-\mathbf{c})-R^2$。可以计算t： \[t=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\] 一般的隐式表面 对于一般的隐式方程：$f(\mathbf{o}+t\mathbf{d})=0$代入光线方程都可以用解析的方式或数值的方式计算得到解。 显式表面 三角形 判断光线在三角形的表面上的位置： 计算光线和三角形所在平面的交点 判断交点是否在三角形内部 平面的定义 平面可以用公式：$(\mathbf{p}-\mathbf{p}’)\cdot\mathbf{N}=0$表示，意义为空间中一点与平面上的一点连线，如果和平面法向量的点积为0，则该点在平面上。 将直线方程代入平面: \[(\mathbf{p}-\mathbf{p}')\cdot\mathbf{N}=(\mathbf{o}+t\mathbf{d}-\mathbf{p}')\cdot\mathbf{N}=0\] 就可以很容易地得到t。 Moller Trumbore 算法 该算法能够之间判断点是否在三角形平面内，原理是计算空间中的一点是否可以用三角形的三个点线性表示。参数$t,b_1,b_2$可以用Cramer法则计算。 光线与表面求交 包围体积方法（Bounding Volumes） 在我们上面介绍的方法中，每判断一条光线与模型的交点，就要遍历所有的模型表面才能知道光线和模型的交点。 为了加速光线求交方法，引入了包围盒的概念。所谓包围盒就是将模型包围起来的长方体盒子。我们只需要计算光线和包围盒的交点。 Axis-Aligned Bounding Box（AABB） 包围盒可以理解为三组平行的平面围成的体积。为了简化包围盒的形式，我们将包围盒的边设置为与坐标轴对齐。 这样的好处是在计算光线和平面的交点时只需要考虑平面法线方向的分量，而当平面与坐标轴对齐时其法线与坐标轴平行，因此只需要取光线的一个轴的分量即可。 在计算光线和盒子的交点时可以分别算光线和三组平面的交点。我们用二维情况举例，如下图所示，光线先和x平面计算交点得到x平面的$t_min$和$t_max$；在和y平面计算交点得到y平面的$t_min$和$t_max$。 我们计算在所有平面中的$t_min$和$t_max$。通过总结规律可以发现：当光线进入所有平面后才算进入包围盒内，只要光线从任意一个平面出来则光线从包围盒射出。因此进入的时间为$t_{enter}=max({t_{min}})$，出去的时间为$t_{exit}=min({t_{max}})$。只要$t_{enter} &amp;lt; t_{exit}$则表示光线在包围盒内一段时间。 当$t_{exit}&amp;lt;0$时，则表示盒子在光线背面，因此没有相交 当$t_{exit}&amp;lt;0 ~ \&amp;amp;\&amp;amp; ~ t_{enter} &amp;lt; 0$时，光线在盒子内，必定有交点。 因此最终的结论为： 光线和AABB有交点，当且仅当$t_{enter} &amp;lt; t_{exit} ~ \&amp;amp;\&amp;amp; ~ t_{exit}&amp;gt;=0$ 光线与物体求交 均匀网格求交 Uniform grid 我们将模型简化为2维情况： 首先计算所有物体的最小AABB 再将包围盒平均划分为更小的区域 从光线的起点出发，沿光线方向遍历方块，判断方块内是否有物体以及光线是否与物体相交。 特点：该方法适用于物体排列均匀的场景，而不适用于不均匀的场景。这是因为如果物体分布不均匀，建模使用的格子数量非常大，速度很慢。如下图所示,上方的场景比下方更适合使用均匀网格求交。 &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-uniform_grid1.png height=200 border=0&amp;gt; &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-uniform_grid2.png height=200 border=0&amp;gt; 其实所有判断光线和物体求交的方法的基本思路与上面相同，但区别在于网格空间的划分上。 空间划分方法 常用的空间数据结构有八叉树（Oct-Tree），KD树（KD-Tree）和BSP-Tree。 Oct-Tree每次沿x,y,z轴将空间划分为大小相同的八份，并根据每个子空间内的物体数量判断是否继续划分。 KD-Tree 每次根据物体的分布情况沿一个轴将空间划分为两份，并根据每个子空间内的物体数量判断是否继续划分。 BSP-Tree每次根据物体的分布情况沿任意角度将空间划分为两份，并根据每个子空间内的物体数量判断是否继续划分。 特点 Oct-Tree 由于每次需要划分八个空间，在空间比较分散时格子数量也会很多 KD-Tree 每次只划分两部分，所以格子数量较少 BSP-Tree 由于没有沿坐标轴切割，所以求交时很复杂。 KD-Tree的求交 一个构建好的KD-Tree具有下图右方的结构。光线和物体求交步骤如下： 光线与与父节点求交 如果有交点，分别判断光线与A的两个子节点是否相交 如果子节点与光线相交且子节点为叶子节点，则判断该空间内的物体是否与光线相交。如果子节点与光线相交但子节点不是叶子节点，则继续步骤1的方法。 KD-Tree求交方法特点 相比均匀网格的求交方法，KD-Tree的求交方法更加高效 KD-Tree方法以及均匀网格等空间划分方法都会面临需要判断空间与物体表面是否相交的问题。对于一个横跨多个包围盒的物体，在KD-Tree中会被计算多次。 物体划分方法（Object Partition） 物体划分方法的优点是避免了空间划分方法出现的包围盒与物体相交的问题。在物体划分中，包围盒是根据物体集合确定的，并且不会出现一个物体划分多次的情况。 包围体积结构（Bounding Volume Hierarchy） BVH的构建方法如下： 计算物体集合的包围盒 将集合分割为两个物体子集，分割的基本原则是： 一直选择最长的轴 从物体集合的中位分割 重新计算两个子集的包围盒，当子集满足一定的数量条件时不再划分，并保存该子集。 BVH的求交与KD-Tree的求交逻辑基本相同。 基于表面积的启发式评估划分方法（Surface Area Heuristic，SAH） 当如下图所示，图元分布不均匀的时候，使用中位分割的方法会容易出现区域重叠的情况，这种情况导致当光线穿过重叠区域时，需要同时遍历两个集合内的子集，增加了计算量。 更好的方法是基于表面积的启发式评估划分方法（Surface Area Heuristic，SAH），这种方法通过对求交代价和遍历代价进行评估，给出了每一种划分的代价（Cost），而我们的目的便是去寻找代价最小的划分。 假设当前节点的包围体中存在$n$个物体，设对每一个物体求交的代价为 $t(i)$ ，如果不做划分依次对其求交则总的代价为： \[\sum t(i)=t(1)+t(2)+\cdots + t(n)\] 如果这些物体划分为2组，这两组物体分别处于它们的包围盒A和B中。设光线击中它们的概率分别为 $p(A)$ 和 $p(B)$, 由于包围盒$A$和包围盒$B$之间存在重叠，且它们并不一定会填满其父节点的包围体，因此$p(A)$ 和 $p(B)$ 的和不一定为1，且它们的和越大说明包围盒$A$和包围盒$B$的重叠程度越大。综上所述，当前节点求交的代价可以写为： \[c(A,B)=p(A)\sum_{i \in A} t(i)+p(B)\sum_{j \in B} t(j) + t_{trav}\] 其中$t_{trav}$表示遍历树状结构的代价。一般来说，我们假设对所有图元的求交代价是相同的，可设 $t(i)=1$，又遍历的代价小于求交的代价，可设 $t_{trav}=0.125$ 。设包围盒A中图元的个数为 $a$ ，B中图元的个数为$b$ ，则： \[c(A,B)=p(A)a+p(B)b + 0.125\] 光线击中包围盒的概率可以根据包围体的表面积来估计，即在父节点的包围体C中，A和B的表面积越大它们被击中的概率也就越大，设 $A$ ， $B$ 和 $C$ 的表面积为$S(A)$ ，$S(B)$ 和 $S(C)$ ，则有： \[c(A,B)=\frac{p(A)}{S(C)}a+\frac{p(B)}{S(C)}b + 0.125\] 在实现的时候，相比于计算可能划分的代价然后寻找代价最小的划分，一种更好的办法是将节点$C$所包围的空间沿着跨度最长的那个坐标轴的方向将空间均等的划分为若干个桶（Buckets）,划分只会出现在桶与桶之间的位置上。如图所示，若桶的个数为n则只会有n-1种划分的可能。 设图元质心在划分坐标轴上位置坐标的分量为$t$ ，则该图元所处桶的索引号为： \[i=Clamp(int(\frac{t-t_{min}}{t_{max}-t_{min}}n), 0, n-1)\] 遍历$C$中所有的图元，统计每一个桶中图元的个数以及每一个桶的包围盒。注意，桶与桶之间存在重叠。得到这些信息后，就能计算每一种划分的代价： \[c(A, B)=\sum_{i&amp;lt;m i d} n_{i} \frac{\bigcup_{i&amp;lt;m i d} S(i)}{S(C)}+\sum_{j \geq m i d} n_{j} \frac{U_{j \geq m i d} S(j)}{S(C)}+t_{t r a v}, m i d \in[1, n]\] 需要注意的是，若当前所有图元质心的位置都相同，则直接建立一个叶节点，该叶节点直接包含这些质心位置相同的图元。 辐射度量学 能量（Energy） $Q[J=Joule]$焦耳 功率（Power、Flux） 功率表示的是单位时间内发射或接收的能量 $\Phi=\frac{dQ}{dt}[W=Watt][text{lm=lumen}]$ 瓦特，流明 辐射强度（Radiante Intensity） 辐射强度表示一个光源发射的单位立体角的功率 \(I(\omega)=\frac{d\Phi}{d\omega}\) \([\frac{W}{sr}][\frac{lm}{sr}=\text{cd=candela}]\) 立体角表示的是球的表面面积与半径平方的比值，在微分情况下$d\omega$如下图所示。 对于一个向周围均匀辐射的点光源，它的辐射强度为 \[I=\frac{\Phi}{4\pi}\] 在传播过程中，不考虑衰减的情况，光源的辐射强度是不会变化的。 辐照度、辐射通量密度（Irradiance） 辐照度表示单位时间每一单位面积的表面接收的能量,注意表面应该与光线方向垂直，如果不垂直应该将表面投影到垂直方向。 \[E(x)=\frac{d\Phi(x)}{dAcos\theta}\] \[[\frac{W}{m^2}][\frac{lm}{m^2}=\text{lux}]\] 对于一个向周围均匀辐射的点光源，它的辐射通量密度和半径平方成反比: \[E(x)=\frac{\Phi(x)}{4\pi R^2}\] 光线（Radiance） 光线表示的是单位立体角、单位面积发射、反射、折射或者接收的能量 \[\begin{aligned} L(p,\omega)&amp;amp;\equiv\frac{d^2\Phi(p,\omega)}{d\omega dAcos\theta}\\ &amp;amp;\equiv \frac{dE(p)}{d\omega cos\theta} \\ &amp;amp;\equiv \frac{dI(\omega)}{dAcos\theta} \end{aligned}\] 下图表示的是表面的辐射通量密度（Irradiance）等于所有立体角上的Radiance之和。 ## 双向反射分布函数（Bidirectional Reflectance Distribution Function）(BRDF) 对于一个反射过程可以用下图描述：入射在单位面积上的能量为$dE(\omega_i)$，单位立体角的反射能量为$dL_r(x,\omega_r)$。 物体表面在接收到辐射之后会向四面八方辐射能量，但由于表面的属性不同，在不同的反射角度上辐射的强度也不相同。BRDF就是用于定义在不同角度上反射光线强度的比例。 对于观察者而言，四面八方的光线都会照射在某一固定表面，同时该表面会向观察位置所在方向发射光线。如下图示意，对某一位置的所有入射光线积分，并乘以固定反射角度的反射分布函数。 如果物体本身会发光，则需要把放光的Radiance加上： \[L_o(p,\omega_o)=L_e(p,\omega_o)+\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)d\omega_i\] 光线追踪(Ray Tracing) 蒙特卡洛积分(Monte Carlo Integrate) 蒙特卡洛积分是用于解决定积分的问题，如果一个函数十分复杂，没有办法使用解析的方法积分得到。蒙特卡洛积分提供了一种数值的方法计算定积分。 对于$f(x)$在（a,b）的积分：$\int_a^bf(x)dx$ 在区间（a,b）之间随机采样,$X_i$满足分布：$X_i \sim p(x)$ 在经过N次采样之后，根据蒙特卡洛估计，积分可以近似为 \[F_N=\frac{1}{N}\sum_{i=1}^N\frac{f(X_i)}{p(X_i)}\] 当在区间（a,b）平均采样时,该方法得到的值就近似于对$f(x)$定积分的估计。 $X_i \sim p(x)=C$，且$\int_a^bp(x)dx=1$ 可以得到$\int_a^bCdx=1$，所以$C=\frac{1}{b-a}$ 因此，对于$f(x)$在（a,b）的积分$\int_a^bf(x)dx$的蒙特卡洛估计为： \[F_N=\frac{b-a}{N}\sum_{i=1}^Nf(X_i)\] 光线追踪相比递归（Whitted-Style）光线追踪 递归（Whitted-Style）光线追踪的特点 当光线打在玻璃表面时，会发生折射和反射 当打在漫反射表面时，会停止反射 光线追踪解决的问题 对于磨砂表面，即既有反射又有漫反射的表面，如下图1的犹他壶 全局光照中，漫反射物体之间的光线反射，如下图2右边应用全局光照后房间内的长方体靠近墙壁的表面会被染成墙壁的颜色，并且天花板也会变亮。这与实际情况是相同的。 &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing1.png height=200 border=0&amp;gt; &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/ray_tracing-ray_tracing2.png height=200 border=0&amp;gt; 蒙特卡洛方法用于光线追踪 我们观测到的表面一个点的光是来自四面八方打在该点的光反射得到的。对于该点，入射的光线方向分布在指向该点的半球上，如下图所示。所以我们可以使用蒙特卡洛积分方法，将随机变量限制在半球范围内对光线进行积分。 我们假设随机变量满足均匀分布，对于一个单位半径的球面，其面积的一半为$2\pi$,所以变量满足概率密度函数：$p(\omega_i)=1/2\pi$. 可以得到蒙特卡洛积分为： \[\begin{aligned} L_o(p,\omega_o)&amp;amp;=\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)d\omega_i \\ &amp;amp;=\frac{1}{N}\sum_{i=1}^N\frac{L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i)}{p(\omega_i)}\\ &amp;amp;=\frac{2\pi}{N}\sum_{i=1}^NL_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(\boldsymbol{n}\cdot\boldsymbol{\omega}_i) \end{aligned}\] 我们将一次反射扩大到多次反射，如下图所示，我们可以将第一次光照的入射光作为第二次光照的反射光，形成递归的形式。 在反射次数增加到m时，根据递归方法，计算的次数增加到$N^m$次。计算复杂度为指数级别，这是硬件无法接受的。 为了解决这个问题，我们每次只采样一次，即N=1。 采样一次会带来很大的噪声，解决办法就是在一个像素上生成多条的路径，再将所有路径的光线求平均，如下图所示： 俄罗斯轮盘赌用于解决光线追踪次数问题 在现实中，光线的反射次数是无限的。单我们在计算时不可能将光线计算无数次，这样就会导致光线的一部分能量损失掉，直观的感受就是画面会变暗。而俄罗斯轮盘赌可以解决光线追踪次数的问题。 俄罗斯轮盘赌（Russian Roulette） 往一个可以装6发子弹的左轮手枪中装入两发子弹，然后转动手枪轮盘。扣动扳机，射出子弹的概率为$P=\frac{1}{3}$。我们用俄罗斯轮盘赌的方式决定光线是否继续往下追踪。 初始时设置一个概率$P$,在反射时，有$P$的概率发射一条光线，并返回的着色数值为$L_o/P$；有$1-P$的概率不发射光线，则对应的着色数值为0。最终着色的期望为： \[E=P*(L_o/P)+(1-P)*0=L_o\] 可以发现期望和真实的光线着色一致。 区域采样提高光线追踪效率 通过上述的方法，我们可以对像素多次采样，并使用俄罗斯轮盘赌的方法得到期望为真实值的光线着色值。下图为单个像素低采样数和高采样数得到的渲染图片对比。可以发现低采样数的图片会出现很多噪点。这是由于光线向半球平均采样的问题。实际中，我们需要对光源角度着重采样。 我们可以重新设置蒙特卡洛采样的概率密度函数，着重对光源区域采样。原本的采样单元为立体角，现在我们需要将采样单元转换为光源区域的面积。 通过上图示意，可以得到区域到立体角的转换： \[d\omega=\frac{dA\cos\theta'}{\lVert x'-x\rVert^2}\] 因此渲染方程可以重写为: \[\begin{aligned} L_o(p,\omega_o)&amp;amp;=\int_{\Omega_+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos\omega_i d\omega_i \\ &amp;amp;=\int_{A}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\frac{\cos\theta\cos\theta'}{\lVert x'-x\rVert^2}dA \end{aligned}\] 我们在光源采样时同时还需要对周围环境采样，对于对光源采样部分，不需要考虑俄罗斯轮盘赌。而对周围环境采样时，则需要考虑俄罗斯轮盘赌。 此外，在对光源采样时还需要考虑遮挡的问题，只对没有遮挡的光源计算着色。</summary></entry><entry><title type="html">计算机图形学（四）——几何（Geometry）</title><link href="http://localhost:4000/2020/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%87%A0%E4%BD%95.html" rel="alternate" type="text/html" title="计算机图形学（四）——几何（Geometry）" /><published>2020-04-22T00:00:00+08:00</published><updated>2020-04-22T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E5%87%A0%E4%BD%95</id><content type="html" xml:base="http://localhost:4000/2020/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%87%A0%E4%BD%95.html">&lt;h1 id=&quot;几何&quot;&gt;几何&lt;/h1&gt;

&lt;p&gt;几何表示方法分为&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;隐式表示方法&lt;/strong&gt;（Implicit Representation）:给定&lt;strong&gt;满足的关系&lt;/strong&gt;而不给定具体的成员
    &lt;ul&gt;
      &lt;li&gt;如$x^2+y^2+z^2=1$，表示满足该公式的所有点的集合&lt;/li&gt;
      &lt;li&gt;更容易判断任意&lt;strong&gt;一个点和该几何形状的空间关系&lt;/strong&gt;，如判断一个点在不在几何内&lt;/li&gt;
      &lt;li&gt;更容易计算光线和表面的交点&lt;/li&gt;
      &lt;li&gt;更容易处理如流体等情况&lt;/li&gt;
      &lt;li&gt;不容易表示复杂的模型&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显式表示方法&lt;/strong&gt;（Explicit Representation）:通过&lt;strong&gt;参数映射&lt;/strong&gt;或者&lt;strong&gt;点云&lt;/strong&gt;的方式表示
    &lt;ul&gt;
      &lt;li&gt;参数映射方法：如$f: \mathcal{R}^2\rightarrow\mathcal{R}^3;(u,v)\rightarrow(x,y,z)$&lt;/li&gt;
      &lt;li&gt;点云：可以表示成一系列点的集合。更常用于大型数据集中。&lt;/li&gt;
      &lt;li&gt;不容易判断一个点与几何形状的空间关系&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;曲线的表示&quot;&gt;曲线的表示&lt;/h2&gt;

&lt;h3 id=&quot;贝塞尔曲线&quot;&gt;贝塞尔曲线&lt;/h3&gt;

&lt;p&gt;贝塞尔曲线是由多个控制点线性组合得到的连续曲线。对于控制点${P_0,P_1,P_2,\cdots P_n}$。可以由一个区间为$(0,1)$参数$t$生成一条贝塞尔曲线。生成方法如下图所示,相邻的两个控制点${P_i^k,P_{i+1}^k}$由权重系数$t$加权得到$P^{k+1}_i$。对于n个控制点，最终会生成点$P^n_0$，该点即为n阶贝塞尔曲线上的一点。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-bezier.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;对于三个控制点的贝塞尔曲线，在线段$P_0P_1$和$P_1P_2$上取相同比例t位置的点$P^1_0$和$P^1_1$，连接$P^1_0P^1_1$。同样，对$P^1_0P^1_1$取线段比例t位置的点$P^2_0$，$P^2_0$为最终生成的采样点。用公式表示为：&lt;/p&gt;

&lt;p&gt;\(\begin{matrix}
P^2_0&amp;amp;=(1-t)((1-t)P_0+tP_1)+t((1-t)P_1+tP_2)\\
&amp;amp;=(1-t)^2P_0+2t(1-t)P_1+t^2P_2
\end{matrix}\)&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-bezier0.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;下图是四个控制点${P_1,P_2,P_3}$生成的贝塞尔曲线中一个点的示意图。其中$P^3_0$为最终生成的采样点，它是贝塞尔曲线上的一个点。用公式表示为：&lt;/p&gt;

&lt;p&gt;\(\begin{matrix}
P^3_0&amp;amp;=(1-t)((1-t)((1-t)P_0+tP_1)+t((1-t)P_1+tP_2))+\\
&amp;amp;t((1-t)((1-t)P_1+tP_2)+t((1-t)P_2+tP_3))\\
&amp;amp;=(1-t)^3P_0+3t(1-t)^2P_1+3t^2(1-t)P_2+t^3P_3
\end{matrix}\)&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-bezier1.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;贝塞尔曲线的显式表达式为&lt;/p&gt;

\[P^n_0(t)=\sum^n_{j=0}P_jB^n_j(t)\]

&lt;p&gt;其中$B^n_j(t)$被称为伯恩斯坦多项式（Bernstein polynomial），其具体表达式为：&lt;/p&gt;

\[B^n_j(t)=C^n_it^i(1-t)^{n-i}\]

&lt;h4 id=&quot;性质&quot;&gt;性质&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;$P^n_0(0)=P_0$;$P^n_0(1)=P_n$&lt;/li&gt;
  &lt;li&gt;反射变换性质：直接对控制点做仿射变换等效于对曲线做仿射变换&lt;/li&gt;
  &lt;li&gt;凸包性质：曲线在控制点组成的凸包内&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;逐段贝塞尔曲线&quot;&gt;逐段贝塞尔曲线&lt;/h4&gt;

&lt;p&gt;当控制点过多时，曲线的调整会变得复杂。因此通常将三次贝塞尔曲线作为一个曲线段，然后组合成复杂的曲线。如在PhotoShop中钢笔工具就是使用三次贝塞尔曲线实现曲线的调整。&lt;/p&gt;

&lt;h4 id=&quot;贝塞尔曲面&quot;&gt;贝塞尔曲面&lt;/h4&gt;
&lt;p&gt;该方法类似双线性插值的思想，可以理解为分为水平方向和垂直方向两个部分，先对水平方向计算得到点，再将这些点作为垂直方向的控制点。&lt;/p&gt;

&lt;h3 id=&quot;b样条b-splines&quot;&gt;B样条（B-splines）&lt;/h3&gt;

&lt;p&gt;在贝塞尔曲线中，改动一个控制点会影响到整个曲线，只有通过分段的方式才能解决这个问题。而B样条不需要分段就能使得改动一个点只会影响一部分的曲线。&lt;/p&gt;

&lt;h2 id=&quot;网格mesh&quot;&gt;网格（Mesh）&lt;/h2&gt;

&lt;h3 id=&quot;网格细分mesh-subdivision&quot;&gt;网格细分（mesh subdivision）&lt;/h3&gt;

&lt;h4 id=&quot;loop-细分&quot;&gt;Loop 细分&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;将三角形分成四个&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision.png&quot; /&gt;
&lt;/center&gt;

&lt;ol&gt;
  &lt;li&gt;根据权重调整顶点位置
    &lt;ul&gt;
      &lt;li&gt;对于下图中新增的白点，用A、B、C、D点加权平均取得。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision1.png&quot; /&gt;
&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;对于原有的顶点，用周围的顶点加权，加权方法为
    &lt;ul&gt;
      &lt;li&gt;point=(1-n&lt;em&gt;u)&lt;/em&gt;原始顶点+u*所有相邻的顶点位置&lt;/li&gt;
      &lt;li&gt;n 为点的度，即连接的边的个数&lt;/li&gt;
      &lt;li&gt;u为权重，具体取值如下图所示&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision2.png&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;catmull-clark-细分适用于通用的网格&quot;&gt;Catmull-Clark 细分（适用于通用的网格）&lt;/h4&gt;

&lt;p&gt;Loop 细分只能够细分三角形网格，而Catmull-Clark 细分适用于通用的网格。
首先定义一些概念：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;非四边形面（Non-quad face）：表面不是四边形的面&lt;/li&gt;
  &lt;li&gt;奇异点（Extaordinary vertex）:点的度不为4，即连接的边数为4&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;细分方法如下图所示对于每一条边取边的中点对于每一个面取面的中点并将面的中点和每一个边的中点连接起来&quot;&gt;细分方法：如下图所示，对于每一条边，取边的中点；对于每一个面，取面的中点；并将面的中点和每一个边的中点连接起来。&lt;/h5&gt;

&lt;center&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision3.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision4.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;一次细分之后，所有非四边形面都会消失，并且每个非四边形面都会引入一个奇异点。并且之后的奇异点数量不会再再增加啊&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision5.png&quot; height=&quot;400&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;顶点调整方法&quot;&gt;顶点调整方法&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;对于面上的点：用面上的顶点加权得到&lt;/li&gt;
  &lt;li&gt;对于边上的点：用边连接的两个面上的点、边连接的点加权得到&lt;/li&gt;
  &lt;li&gt;对于旧的点：用相邻面上的点、相邻边上的点、自身点加权得到&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision6.png&quot; height=&quot;400&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;网格简化mesh-simplificaton&quot;&gt;网格简化（mesh simplificaton）&lt;/h3&gt;

&lt;p&gt;对于一些较简单的模型或者观测距离很远，有时候不需要很多的网格数量，这就需要对网格进行简化。&lt;/p&gt;

&lt;h4 id=&quot;边坍缩edge-collapsing&quot;&gt;边坍缩（Edge Collapsing）&lt;/h4&gt;

&lt;p&gt;边坍缩的基本方法就是去掉一条边，并将边两端的点连接到一块。这个次想法面临两个问题&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;要坍缩哪一条边&lt;/li&gt;
  &lt;li&gt;坍缩之后的顶点位置怎么确定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决这两个问题，就要用到二次误差度量（Quadric Error Metrics）方法。&lt;/p&gt;

&lt;h5 id=&quot;二次误差度量quadric-error-metrics&quot;&gt;二次误差度量（Quadric Error Metrics）&lt;/h5&gt;

&lt;p&gt;二次误差度量表示的是一个点到与它有关系的面的距离的平方和。最小化二次误差就是将该点放置到一个位置，使得二次误差最小。这就成为一个优化问题。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_simplification.png&quot; height=&quot;200&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;坍缩哪一条边&quot;&gt;坍缩哪一条边&lt;/h5&gt;

&lt;p&gt;对于每一条边，都可以计算坍缩之后的最小的二次误差。因此，对于整个模型，我们首先坍缩二次误差最小的哪一条边。&lt;/p&gt;

&lt;h5 id=&quot;算法流程&quot;&gt;算法流程&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;计算所有边的坍缩的最小二次距离误差，并构建成堆的结构&lt;/li&gt;
  &lt;li&gt;坍缩最小二次距离误差最小的边，同时由于边位置发生变化，需要更新最小二次距离误差的堆结构&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;网格规则化mesh-regularization&quot;&gt;网格规则化（mesh regularization）&lt;/h3&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">几何 几何表示方法分为 隐式表示方法（Implicit Representation）:给定满足的关系而不给定具体的成员 如$x^2+y^2+z^2=1$，表示满足该公式的所有点的集合 更容易判断任意一个点和该几何形状的空间关系，如判断一个点在不在几何内 更容易计算光线和表面的交点 更容易处理如流体等情况 不容易表示复杂的模型 显式表示方法（Explicit Representation）:通过参数映射或者点云的方式表示 参数映射方法：如$f: \mathcal{R}^2\rightarrow\mathcal{R}^3;(u,v)\rightarrow(x,y,z)$ 点云：可以表示成一系列点的集合。更常用于大型数据集中。 不容易判断一个点与几何形状的空间关系 曲线的表示 贝塞尔曲线 贝塞尔曲线是由多个控制点线性组合得到的连续曲线。对于控制点${P_0,P_1,P_2,\cdots P_n}$。可以由一个区间为$(0,1)$参数$t$生成一条贝塞尔曲线。生成方法如下图所示,相邻的两个控制点${P_i^k,P_{i+1}^k}$由权重系数$t$加权得到$P^{k+1}_i$。对于n个控制点，最终会生成点$P^n_0$，该点即为n阶贝塞尔曲线上的一点。 对于三个控制点的贝塞尔曲线，在线段$P_0P_1$和$P_1P_2$上取相同比例t位置的点$P^1_0$和$P^1_1$，连接$P^1_0P^1_1$。同样，对$P^1_0P^1_1$取线段比例t位置的点$P^2_0$，$P^2_0$为最终生成的采样点。用公式表示为： \(\begin{matrix} P^2_0&amp;amp;=(1-t)((1-t)P_0+tP_1)+t((1-t)P_1+tP_2)\\ &amp;amp;=(1-t)^2P_0+2t(1-t)P_1+t^2P_2 \end{matrix}\) 下图是四个控制点${P_1,P_2,P_3}$生成的贝塞尔曲线中一个点的示意图。其中$P^3_0$为最终生成的采样点，它是贝塞尔曲线上的一个点。用公式表示为： \(\begin{matrix} P^3_0&amp;amp;=(1-t)((1-t)((1-t)P_0+tP_1)+t((1-t)P_1+tP_2))+\\ &amp;amp;t((1-t)((1-t)P_1+tP_2)+t((1-t)P_2+tP_3))\\ &amp;amp;=(1-t)^3P_0+3t(1-t)^2P_1+3t^2(1-t)P_2+t^3P_3 \end{matrix}\) 贝塞尔曲线的显式表达式为 \[P^n_0(t)=\sum^n_{j=0}P_jB^n_j(t)\] 其中$B^n_j(t)$被称为伯恩斯坦多项式（Bernstein polynomial），其具体表达式为： \[B^n_j(t)=C^n_it^i(1-t)^{n-i}\] 性质 $P^n_0(0)=P_0$;$P^n_0(1)=P_n$ 反射变换性质：直接对控制点做仿射变换等效于对曲线做仿射变换 凸包性质：曲线在控制点组成的凸包内 逐段贝塞尔曲线 当控制点过多时，曲线的调整会变得复杂。因此通常将三次贝塞尔曲线作为一个曲线段，然后组合成复杂的曲线。如在PhotoShop中钢笔工具就是使用三次贝塞尔曲线实现曲线的调整。 贝塞尔曲面 该方法类似双线性插值的思想，可以理解为分为水平方向和垂直方向两个部分，先对水平方向计算得到点，再将这些点作为垂直方向的控制点。 B样条（B-splines） 在贝塞尔曲线中，改动一个控制点会影响到整个曲线，只有通过分段的方式才能解决这个问题。而B样条不需要分段就能使得改动一个点只会影响一部分的曲线。 网格（Mesh） 网格细分（mesh subdivision） Loop 细分 将三角形分成四个 根据权重调整顶点位置 对于下图中新增的白点，用A、B、C、D点加权平均取得。 对于原有的顶点，用周围的顶点加权，加权方法为 point=(1-nu)原始顶点+u*所有相邻的顶点位置 n 为点的度，即连接的边的个数 u为权重，具体取值如下图所示 Catmull-Clark 细分（适用于通用的网格） Loop 细分只能够细分三角形网格，而Catmull-Clark 细分适用于通用的网格。 首先定义一些概念： 非四边形面（Non-quad face）：表面不是四边形的面 奇异点（Extaordinary vertex）:点的度不为4，即连接的边数为4 细分方法：如下图所示，对于每一条边，取边的中点；对于每一个面，取面的中点；并将面的中点和每一个边的中点连接起来。 &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision3.png height=200 border=0&amp;gt; &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/geometry-mesh_subdivision4.png height=200 border=0&amp;gt; 一次细分之后，所有非四边形面都会消失，并且每个非四边形面都会引入一个奇异点。并且之后的奇异点数量不会再再增加啊 顶点调整方法 对于面上的点：用面上的顶点加权得到 对于边上的点：用边连接的两个面上的点、边连接的点加权得到 对于旧的点：用相邻面上的点、相邻边上的点、自身点加权得到 网格简化（mesh simplificaton） 对于一些较简单的模型或者观测距离很远，有时候不需要很多的网格数量，这就需要对网格进行简化。 边坍缩（Edge Collapsing） 边坍缩的基本方法就是去掉一条边，并将边两端的点连接到一块。这个次想法面临两个问题 要坍缩哪一条边 坍缩之后的顶点位置怎么确定 解决这两个问题，就要用到二次误差度量（Quadric Error Metrics）方法。 二次误差度量（Quadric Error Metrics） 二次误差度量表示的是一个点到与它有关系的面的距离的平方和。最小化二次误差就是将该点放置到一个位置，使得二次误差最小。这就成为一个优化问题。 坍缩哪一条边 对于每一条边，都可以计算坍缩之后的最小的二次误差。因此，对于整个模型，我们首先坍缩二次误差最小的哪一条边。 算法流程 计算所有边的坍缩的最小二次距离误差，并构建成堆的结构 坍缩最小二次距离误差最小的边，同时由于边位置发生变化，需要更新最小二次距离误差的堆结构 网格规则化（mesh regularization）</summary></entry><entry><title type="html">理财——指数基金定投指南</title><link href="http://localhost:4000/2020/04/14/%E7%90%86%E8%B4%A2-%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E6%8C%87%E5%8D%97.html" rel="alternate" type="text/html" title="理财——指数基金定投指南" /><published>2020-04-14T00:00:00+08:00</published><updated>2020-04-14T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/14/%E7%90%86%E8%B4%A2%E2%80%94%E2%80%94%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E6%8C%87%E5%8D%97</id><content type="html" xml:base="http://localhost:4000/2020/04/14/%E7%90%86%E8%B4%A2-%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E6%8C%87%E5%8D%97.html">&lt;h1 id=&quot;指数基金定投指南一&quot;&gt;指数基金定投指南（一）&lt;/h1&gt;

&lt;h2 id=&quot;指数&quot;&gt;指数&lt;/h2&gt;

&lt;h3 id=&quot;什么是指数&quot;&gt;什么是指数&lt;/h3&gt;

&lt;p&gt;指数是一个选股规则，他的目的是按照某个规则挑选出一篮子股票，并反映这一篮子股票的平均价格走势。&lt;/p&gt;

&lt;h3 id=&quot;开发指数的机构&quot;&gt;开发指数的机构&lt;/h3&gt;

&lt;h4 id=&quot;中国内地&quot;&gt;中国内地&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;证券交易所
    &lt;ul&gt;
      &lt;li&gt;上海证券交易所——上证系列指数&lt;/li&gt;
      &lt;li&gt;深圳证券交易所——深证系列指数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;指数公司
    &lt;ul&gt;
      &lt;li&gt;中证指数有限公司——中证系列指数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;美国&quot;&gt;美国&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;交易所
    &lt;ul&gt;
      &lt;li&gt;纳斯达克指数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;指数公司
    &lt;ul&gt;
      &lt;li&gt;普标500指数&lt;/li&gt;
      &lt;li&gt;道琼斯指数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;香港&quot;&gt;香港&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;恒生公司
    &lt;ul&gt;
      &lt;li&gt;恒生指数&lt;/li&gt;
      &lt;li&gt;H股指数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;常见指数基金品种&quot;&gt;常见指数基金品种&lt;/h2&gt;

&lt;h3 id=&quot;指数基金的分类&quot;&gt;指数基金的分类&lt;/h3&gt;

&lt;h4 id=&quot;宽基指数与行业指数&quot;&gt;宽基指数与行业指数&lt;/h4&gt;
&lt;p&gt;挑选股票的时候不限制行业；挑选股票的时候只限制在某一些行业&lt;/p&gt;

&lt;h4 id=&quot;增强型指数基金&quot;&gt;增强型指数基金&lt;/h4&gt;
&lt;p&gt;在原本指数基金的基础上去做一些操作来专区超额收益如打新、量化模型等。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;打新就是用资金参与新股申购&lt;/li&gt;
  &lt;li&gt;量化模型就是把数理统计学应用于科学数据，以使数理统计学构造出来的模型得到经验上的支持，并获得数值结果。根据结果在控制风险的前提下实现收益的最大化，在低位买进，在最高位抛出的波段操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;联接基金&quot;&gt;联接基金&lt;/h4&gt;
&lt;p&gt;由于场内基金投资需要开股票账户，具体操作比较麻烦。因此基金公司就开发了联接基金，方便从场外投资。很多基金公司成离ETF基金（交易型开放式指数基金）时，大多数也会成立对应的ETF联接基金，ETF联接基金是投资到对应的ETF基金上的，一般不会再单独收取管理费用。&lt;/p&gt;

&lt;h3 id=&quot;指数基金的交易渠道&quot;&gt;指数基金的交易渠道&lt;/h3&gt;
&lt;p&gt;基金指数从交易渠道上可以分为&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;场内指数基金，主要是ETF基金（交易型开放式指数基金）和LOF基金（上市型开放式基金）&lt;/li&gt;
  &lt;li&gt;场外指数基金&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个场指的是证券交易所，其中ETF基金只能通过股票交易软件交易，LOF基金还可以在场外通过申购赎回的方式交易。&lt;/p&gt;

&lt;p&gt;二者的区别在于：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;交易机制不同：
场外基金是通过基金公司、银行、第三方基金销售平台买卖；
场内基金是投资者与其他投资者进行交易。&lt;/li&gt;
  &lt;li&gt;功能性不同：
场外基金只能进行申购和赎回，没有交易功能。
场内基金可以和股票一样在二级市场交易，但是不能定投。&lt;/li&gt;
  &lt;li&gt;投资门槛不同：
场外基金投资门槛很低；
场内基金买卖类似于股票，至少需要买一手，也就是100份额的基金，因此门槛较高。&lt;/li&gt;
  &lt;li&gt;费率不同：
选择购买场外基金，由基金公司、银行、第三方基金销售平台决定费率；
场内基金费用取决于开户的券商的佣金，佣金和证券交易一样&lt;/li&gt;
  &lt;li&gt;流动性不同：
场内基金流动相较好，到账时间较快。&lt;/li&gt;
  &lt;li&gt;可选基金数量不同：
场外基金数量多，选择余地大；场内基金数量少，类型少。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;常见的宽基指数基金&quot;&gt;常见的宽基指数基金&lt;/h3&gt;

&lt;h4 id=&quot;1上证50指数000016&quot;&gt;1.上证50指数（000016）&lt;/h4&gt;
&lt;p&gt;上证指数是从上交所挑选沪市规模最大、流动性最好、最具代表性的50只股票组成的样本股。&lt;/p&gt;
&lt;h5 id=&quot;特点&quot;&gt;特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;以大盘股为主，也成为蓝筹股，蓝筹出自西方赌场，赌场里蓝色筹码最为值钱。后来人们就用蓝筹股表示规模较大、有影响力的公司。&lt;/li&gt;
  &lt;li&gt;只有上交所的股票&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2沪深300指数000300399300&quot;&gt;2.沪深300指数（000300/399300）&lt;/h4&gt;
&lt;p&gt;沪深300是由中证指数公司开发的，从上交所和深交所挑选规模最大、流动性最好的300只股票。沪深300被认为是国内股市最具代表性的指数。&lt;/p&gt;
&lt;h5 id=&quot;特点-1&quot;&gt;特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;以大盘股为主，兼顾上海和深圳上市公司&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3中证500指数&quot;&gt;3.中证500指数&lt;/h4&gt;
&lt;p&gt;中证500是由中证指数公司开发，代表的是国内中等规模上市公司。&lt;strong&gt;该指数是将全部沪深300指数的300家公司排除，然后将最近一年日均总市值排名前300名的企业也排除，再剩下的公司中，选择日均总市值排名500名的企业&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;特点-2&quot;&gt;特点&lt;/h5&gt;
&lt;p&gt;以中型上市公司为主，与沪深300和上证50重合度很低。&lt;/p&gt;

&lt;h4 id=&quot;4创业板指数&quot;&gt;4.创业板指数&lt;/h4&gt;
&lt;p&gt;上交所和深交所上市交易的股票大多在主板上市交易。但&lt;strong&gt;主板上市交易门槛很高&lt;/strong&gt;，需要达到一定的&lt;strong&gt;规模和盈利&lt;/strong&gt;。国家针对盈利条件不好的小公司创建了创业板。创业板是放在深交所下面的。&lt;/p&gt;
&lt;h5 id=&quot;特点-3&quot;&gt;特点&lt;/h5&gt;
&lt;p&gt;相比主板指数，容易出现暴涨暴跌&lt;/p&gt;

&lt;h4 id=&quot;5红利指数&quot;&gt;5.红利指数&lt;/h4&gt;
&lt;p&gt;以上指数挑选股票时时按照市值加权的，即股票规模越大，权重越高。这类叫做&lt;strong&gt;市值加权&lt;/strong&gt;。还有另一类股票是按照&lt;strong&gt;策略加权&lt;/strong&gt;的方法挑选的。&lt;em&gt;其中红利指数就是策略加权的一种，它是按照股息率决定权重，股息率越高的股票权重越大&lt;/em&gt;。&lt;strong&gt;所谓股息就是现金分红。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;上证红利指数（000015）：
上交所过去两年平均现金股息率最高的50只股票。&lt;/li&gt;
  &lt;li&gt;中证红利指数（000922/399922）：
上交所和深交所过去两年平均现金股息率最高的100只股票。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;从历史表现上来看，中证红利的历史收益要高于上证红利。&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;深证红利指数（399324）：
深交所过去两年平均现金股息率最高的40只股票。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;红利机会指数&quot;&gt;红利机会指数&lt;/h5&gt;
&lt;p&gt;红利机会指数是在传统红利指数的基础上增加了三个要求：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;过去三年盈利增长为正 ——&amp;gt;筛选掉盈利走下坡路的高分红股&lt;/li&gt;
  &lt;li&gt;过去净盈利必须为正&lt;/li&gt;
  &lt;li&gt;每只股票权重不超过3%，单个行业不超过33% ——&amp;gt;限制指数行业的占比
    &lt;h5 id=&quot;特点-4&quot;&gt;特点&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;高股息率，在熊市更有优势&lt;/li&gt;
  &lt;li&gt;能够持续发放现金股息的公司，盈利能力和财物健康状况好的概率越高&lt;/li&gt;
  &lt;li&gt;提供分红现金流&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;7基本面指数&quot;&gt;7.基本面指数&lt;/h4&gt;
&lt;p&gt;基本面指数也是策略加权的一种。一个公司的基本面包括:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;营业收入&lt;/li&gt;
  &lt;li&gt;现金流&lt;/li&gt;
  &lt;li&gt;净资产&lt;/li&gt;
  &lt;li&gt;分红&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本面指数就是按照以上4个指标挑选股票。&lt;/p&gt;

&lt;h5 id=&quot;中证基本面50指数特点&quot;&gt;中证基本面50指数特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;与上证50指数相近&lt;/li&gt;
  &lt;li&gt;挑选股票考虑得更加全面&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;8恒生指数&quot;&gt;8.恒生指数&lt;/h4&gt;
&lt;p&gt;恒生指数是港交所发行的港股指数基金。选取的是所有在中国香港上市的公司中规模最大的50家企业。&lt;/p&gt;
&lt;h5 id=&quot;特点-5&quot;&gt;特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;历史悠久，成熟开放&lt;/li&gt;
  &lt;li&gt;跟内地紧密关联，但投资者以境外投资者为主。&lt;/li&gt;
  &lt;li&gt;“老千股”导致个股投资风险巨大
    &lt;h5 id=&quot;港股通&quot;&gt;港股通&lt;/h5&gt;
    &lt;p&gt;通过港股通内地可以更为方便地投资香港股票。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;9h股指数恒生中国企业指数&quot;&gt;9.H股指数(恒生中国企业指数)&lt;/h4&gt;
&lt;p&gt;挑选在香港上市的内地企业中的股票。&lt;/p&gt;
&lt;h5 id=&quot;特点-6&quot;&gt;特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;内地公司在境外的“代言人”&lt;/li&gt;
  &lt;li&gt;与内地经济紧密相关，但仍旧以境外投资者为主&lt;/li&gt;
  &lt;li&gt;多数H股公司也会在A股上市，H股与A股关系紧密&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;10上证ah优选指数&quot;&gt;10.上证AH优选指数&lt;/h4&gt;
&lt;p&gt;对于同时在A股和H股上市的公司，买入AH股中相对便宜的，卖出相对贵的。&lt;/p&gt;
&lt;h5 id=&quot;特点-7&quot;&gt;特点&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;成分股与上证50相同&lt;/li&gt;
  &lt;li&gt;成分股入选时，如果成分股同时具备A股和H股，选相对便宜的。&lt;/li&gt;
  &lt;li&gt;每个月第二周，进行依次轮动&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;11纳斯达克100指数&quot;&gt;11.纳斯达克100指数&lt;/h4&gt;
&lt;p&gt;纳斯达克规模最大的100家大型企业。&lt;/p&gt;

&lt;h4 id=&quot;12普标500指数&quot;&gt;12.普标500指数&lt;/h4&gt;
&lt;p&gt;普标500是&lt;strong&gt;附带主观判断的蓝筹股指数&lt;/strong&gt;，倾向于选择行业的领导者、长期盈利更好的公司。&lt;/p&gt;

&lt;h3 id=&quot;行业指数基金&quot;&gt;行业指数基金&lt;/h3&gt;
&lt;p&gt;十个一级行业&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;材料：金属、采矿、化学制品&lt;/li&gt;
  &lt;li&gt;可选消费：汽车、零售、媒体、房地产&lt;/li&gt;
  &lt;li&gt;必需消费：食品、烟草、家居等&lt;/li&gt;
  &lt;li&gt;能源：能源设备、石油天然气等&lt;/li&gt;
  &lt;li&gt;金融：银行、保险、券商等&lt;/li&gt;
  &lt;li&gt;医药：医疗保健、制药、生物科技等&lt;/li&gt;
  &lt;li&gt;工业：航空航天、运输、建筑等&lt;/li&gt;
  &lt;li&gt;信息：硬件、软件、信息技术&lt;/li&gt;
  &lt;li&gt;电信：固定线路、无线通信、电信业务&lt;/li&gt;
  &lt;li&gt;公共事业：电力、天然气、水&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;值得投资的行业&quot;&gt;值得投资的行业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;天生赚钱更容易的行业
    &lt;ul&gt;
      &lt;li&gt;医药&lt;/li&gt;
      &lt;li&gt;必需消费&lt;/li&gt;
      &lt;li&gt;可选消费&lt;/li&gt;
      &lt;li&gt;养老&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具有明显强周期性的行业
    &lt;ul&gt;
      &lt;li&gt;金融&lt;/li&gt;
      &lt;li&gt;能源&lt;/li&gt;
      &lt;li&gt;部分材料行业&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;必需消费行业&quot;&gt;必需消费行业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;上证消费指数&lt;/li&gt;
  &lt;li&gt;上证消费80指数&lt;/li&gt;
  &lt;li&gt;中证消费指数&lt;/li&gt;
  &lt;li&gt;全指消费指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;医药行业&quot;&gt;医药行业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证医药指数&lt;/li&gt;
  &lt;li&gt;中证医药100指数&lt;/li&gt;
  &lt;li&gt;上证医药指数&lt;/li&gt;
  &lt;li&gt;全指医药指数&lt;/li&gt;
  &lt;li&gt;细分医药指数&lt;/li&gt;
  &lt;li&gt;300医药指数&lt;/li&gt;
  &lt;li&gt;500医药指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;可选消费行业&quot;&gt;可选消费行业&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;需求比必需消费弱，有一定周期性&lt;/li&gt;
  &lt;li&gt;受益于人口红利，特别是人均消费金额的提升&lt;/li&gt;
  &lt;li&gt;可选消费的升级换代特性&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;养老行业&quot;&gt;养老行业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证养老指数
    &lt;h5 id=&quot;特点-8&quot;&gt;特点&lt;/h5&gt;
    &lt;p&gt;股票挑选方式是先保证各子行业的龙头入选，再按市值来挑选。养老产业指数主要是由医药行业、必须消费行业和可选消费行业混合的。因此具备医药和消费的优秀属性&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;强周期性行业之银行业&quot;&gt;强周期性行业之银行业&lt;/h4&gt;
&lt;p&gt;券商业绩会受牛市和熊市影响；银行会受宏观经济影响；航空会因为油价的波动而成本变化很大。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;上证50指数、基本面50指数、H股指数、50AH优选指数。这四个指数中包含了很多银行股&lt;/li&gt;
  &lt;li&gt;中证银行指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;强周期性行业之证券业&quot;&gt;强周期性行业之证券业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证全指证券行业指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;强周期性行业之地产行业&quot;&gt;强周期性行业之地产行业&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证800地产指数&lt;/li&gt;
  &lt;li&gt;国证地产指数&lt;/li&gt;
  &lt;li&gt;地产等权指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;军工指数&quot;&gt;军工指数&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证军工指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;环保&quot;&gt;环保&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证环保指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;白酒&quot;&gt;白酒&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;中证白酒指数&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;挑选适合投资的指数基金&quot;&gt;挑选适合投资的指数基金&lt;/h2&gt;

&lt;h3 id=&quot;价值投资的理念&quot;&gt;价值投资的理念&lt;/h3&gt;
&lt;p&gt;低估值资产投资+指数基金&lt;/p&gt;

&lt;h4 id=&quot;基本理论&quot;&gt;基本理论&lt;/h4&gt;

&lt;h4 id=&quot;价格与价值的关系&quot;&gt;价格与价值的关系&lt;/h4&gt;
&lt;p&gt;价格在长期内与其内在价值趋于一致&lt;/p&gt;

&lt;h4 id=&quot;能力圈&quot;&gt;能力圈&lt;/h4&gt;
&lt;p&gt;能力圈理论要求我们对所投资品种非常了解，能大致判断出其内在价值。&lt;/p&gt;

&lt;h4 id=&quot;安全边际&quot;&gt;安全边际&lt;/h4&gt;
&lt;p&gt;要用比价值更低的价格去买股票&lt;/p&gt;

&lt;h3 id=&quot;常见的估值指标&quot;&gt;常见的估值指标&lt;/h3&gt;

&lt;h4 id=&quot;市盈率&quot;&gt;市盈率&lt;/h4&gt;
&lt;p&gt;市盈率=$\frac{公司市值}{公司盈利}$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;静态市盈率： 公司上一个年度的净利润&lt;/li&gt;
  &lt;li&gt;滚动市盈率： 公司最近4个季度的净利润&lt;/li&gt;
  &lt;li&gt;动态市盈率： 预估的下一个年度的净利润&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;特点-9&quot;&gt;特点&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;市盈率反映我们愿意为1元的净利润付出多少代价&lt;/li&gt;
  &lt;li&gt;估算市值&lt;/li&gt;
  &lt;li&gt;市盈率的适用范围：流通性好、盈利稳定的品种
    &lt;ol&gt;
      &lt;li&gt;流通性好：股票流通性差意味着成交量低，如果需求大于成交量就会导致成交价大幅度上升。一般能够进入沪深300，中证500之类的股票流通性都没问题。&lt;/li&gt;
      &lt;li&gt;盈利稳定：对于没落行业、周期性行业（钢铁、煤炭、证券、航空航运）、处于成长期的行业其盈利并不稳定，并不适用市盈率。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;盈利收益率&quot;&gt;盈利收益率&lt;/h4&gt;
&lt;p&gt;盈利收益率=$\frac{公司盈利}{公司市值}=\frac{1}{市盈率}$&lt;/p&gt;

&lt;p&gt;盈利收益率为市盈率的倒数，一般盈利收益率越高，代表公司的估值就越低，公司越有可能被低估。盈利收益率同样只适用于&lt;strong&gt;流通性好、盈利稳定&lt;/strong&gt;的股票&lt;/p&gt;

&lt;h4 id=&quot;市净率&quot;&gt;市净率&lt;/h4&gt;
&lt;p&gt;市净率=$\frac{公司市值}{公司净资产}$&lt;/p&gt;

&lt;p&gt;净资产=资产-负债&lt;/p&gt;

&lt;h5 id=&quot;影响市净率有效性的因素&quot;&gt;影响市净率有效性的因素&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;净资产收益（ROE）:ROE=$\frac{净利润}{净资产}$&lt;/li&gt;
  &lt;li&gt;资产的价值稳定性：有的资产会随时间增值，有的会随时间贬值。&lt;/li&gt;
  &lt;li&gt;无形资产：品牌、技术、专利、话语权等，&lt;strong&gt;如果一个公司主要考无形资产经营如律师事务所、广告、互联网公司等，那市盈率就没有多少参考价值。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;负债大增或亏损：如果公司负债不稳定，会影响到净资产&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当&lt;strong&gt;企业的资产大多是比较容易衡量价值的有形资产，并且长期保值&lt;/strong&gt;时比较适合用市净率来估值&lt;/p&gt;

&lt;h4 id=&quot;股息率&quot;&gt;股息率&lt;/h4&gt;

&lt;p&gt;分红率=$\frac{过去一年的现金派息}{公司的总净利润}$&lt;/p&gt;

&lt;p&gt;股息率=$\frac{过去一年的现金派息}{公司总市值}=\frac{过去一年的现金派息}{公司的总净利润}&lt;em&gt;\frac{公司的总净利润}{公司总市值}=分红率&lt;/em&gt;盈利收益率$&lt;/p&gt;

&lt;p&gt;一般分红率是公司预先设置好的，并且连续多年不会改变&lt;/p&gt;

&lt;h4 id=&quot;查询指数的估值&quot;&gt;查询指数的估值&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;指数基金可以计算估值，但普通的股票基金的信息往往不会公开&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;关注指数基金公众号&quot;&gt;关注指数基金公众号&lt;/h5&gt;
&lt;p&gt;定投十年赚十倍&lt;/p&gt;

&lt;h5 id=&quot;指数官网&quot;&gt;指数官网&lt;/h5&gt;

&lt;h5 id=&quot;金融终端&quot;&gt;金融终端&lt;/h5&gt;

&lt;h3 id=&quot;盈利收益率法挑选指数基金&quot;&gt;盈利收益率法挑选指数基金&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;当盈利收益率大于10%时开始定投&lt;/li&gt;
  &lt;li&gt;当盈利收益率低于10%时，停止定投，对已经定投的份额选择持有&lt;/li&gt;
  &lt;li&gt;当盈利收益率低于6.4%时，分批卖出基金份额&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;盈利收益率法的局限和适合品种&quot;&gt;盈利收益率法的局限和适合品种&lt;/h4&gt;

&lt;p&gt;盈利收益率法只适合流通性比较好，盈利较稳定的品种。如果盈利增长速度较快，或者盈利波动较大的指数基金不适用。&lt;/p&gt;

&lt;p&gt;适合的品种有上证红利、中证红利、上证50、基本面50、上证50AH优选、央视50、恒生指数、恒生中国指数等。&lt;/p&gt;

&lt;h3 id=&quot;博格公式法挑选指数基金&quot;&gt;博格公式法挑选指数基金&lt;/h3&gt;

&lt;h4 id=&quot;影响指数基金收益的三大因素&quot;&gt;影响指数基金收益的三大因素&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;初始投资时刻指数基金的股息率&lt;/li&gt;
  &lt;li&gt;投资期内指数基金的市盈率变化&lt;/li&gt;
  &lt;li&gt;投资期内指数基金的盈利增长率&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;指数基金的未来年复合收益率=指数基金的股息率+指数基金的市盈率变化率+指数基金的盈利增长率&lt;/p&gt;

&lt;p&gt;根据以上三个因素，我们可以做到下面三点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在股息率高得时候买入&lt;/li&gt;
  &lt;li&gt;在市盈率处于历史低位的时候买入&lt;/li&gt;
  &lt;li&gt;买入之后耐心等待均值回归&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;指数基金估值方法小结&quot;&gt;指数基金估值方法小结&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;对于&lt;strong&gt;盈利稳定&lt;/strong&gt;的指数：适用&lt;strong&gt;盈利收益率法&lt;/strong&gt;分析&lt;/li&gt;
  &lt;li&gt;对于&lt;strong&gt;盈利成高速增长态势&lt;/strong&gt;的指数：使用&lt;strong&gt;博格公式&lt;/strong&gt;判断，需要了解历史的市盈率波动范围&lt;/li&gt;
  &lt;li&gt;对于&lt;strong&gt;盈利不稳定状态&lt;/strong&gt;或&lt;strong&gt;盈利承周期性变化&lt;/strong&gt;，&lt;strong&gt;但行业没有长期亏损记录的指数&lt;/strong&gt;：使用博格公式的变种，即当&lt;strong&gt;市净率处于历史市净率波动范围的较低区域&lt;/strong&gt;，可以对其进行投资。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;提高定投收益的技巧&quot;&gt;提高定投收益的技巧&lt;/h3&gt;

&lt;h4 id=&quot;降低交易基金的费用&quot;&gt;降低交易基金的费用&lt;/h4&gt;

&lt;h5 id=&quot;费用类别&quot;&gt;费用类别&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;申购费赎回费：选择靠谱的网络平台申购，赎回费随时间增加降低&lt;/li&gt;
  &lt;li&gt;买卖佣金：基本费用在0.03%左右&lt;/li&gt;
  &lt;li&gt;销售服务费：C类基金不收取申购赎回费，但每年会收取销售服务费&lt;/li&gt;
  &lt;li&gt;印花税：印花税时针对场内基金的品种。目前股票交易的印花税为0.1%，单边收取，即买股票不收，卖股票才收。&lt;/li&gt;
  &lt;li&gt;分红税：持股不到一个月扣除20%的税；持股1个月至一年，扣除10%的税；持股一年以上，扣除5%的税。&lt;/li&gt;
  &lt;li&gt;所得税：国内基金交易不需要交。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;降低费用的要诀&quot;&gt;降低费用的要诀&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;尽量选择费率较低的场外和场内渠道&lt;/li&gt;
  &lt;li&gt;不要过于频繁交易&lt;/li&gt;
  &lt;li&gt;成立1年以上的指数基金，在分红税上更有优势&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;定期不定额盈利收益率法&quot;&gt;定期不定额：盈利收益率法&lt;/h4&gt;

&lt;p&gt;当基金盈利收益率的时候，多投一些。&lt;/p&gt;

&lt;p&gt;首次定投金额✖$\frac{当月盈利收益率}{首次的盈利收益率}$&lt;/p&gt;</content><author><name>XPX</name></author><category term="理财" /><summary type="html">指数基金定投指南（一） 指数 什么是指数 指数是一个选股规则，他的目的是按照某个规则挑选出一篮子股票，并反映这一篮子股票的平均价格走势。 开发指数的机构 中国内地 证券交易所 上海证券交易所——上证系列指数 深圳证券交易所——深证系列指数 指数公司 中证指数有限公司——中证系列指数 美国 交易所 纳斯达克指数 指数公司 普标500指数 道琼斯指数 香港 恒生公司 恒生指数 H股指数 常见指数基金品种 指数基金的分类 宽基指数与行业指数 挑选股票的时候不限制行业；挑选股票的时候只限制在某一些行业 增强型指数基金 在原本指数基金的基础上去做一些操作来专区超额收益如打新、量化模型等。 打新就是用资金参与新股申购 量化模型就是把数理统计学应用于科学数据，以使数理统计学构造出来的模型得到经验上的支持，并获得数值结果。根据结果在控制风险的前提下实现收益的最大化，在低位买进，在最高位抛出的波段操作。 联接基金 由于场内基金投资需要开股票账户，具体操作比较麻烦。因此基金公司就开发了联接基金，方便从场外投资。很多基金公司成离ETF基金（交易型开放式指数基金）时，大多数也会成立对应的ETF联接基金，ETF联接基金是投资到对应的ETF基金上的，一般不会再单独收取管理费用。 指数基金的交易渠道 基金指数从交易渠道上可以分为 场内指数基金，主要是ETF基金（交易型开放式指数基金）和LOF基金（上市型开放式基金） 场外指数基金 这个场指的是证券交易所，其中ETF基金只能通过股票交易软件交易，LOF基金还可以在场外通过申购赎回的方式交易。 二者的区别在于： 交易机制不同： 场外基金是通过基金公司、银行、第三方基金销售平台买卖； 场内基金是投资者与其他投资者进行交易。 功能性不同： 场外基金只能进行申购和赎回，没有交易功能。 场内基金可以和股票一样在二级市场交易，但是不能定投。 投资门槛不同： 场外基金投资门槛很低； 场内基金买卖类似于股票，至少需要买一手，也就是100份额的基金，因此门槛较高。 费率不同： 选择购买场外基金，由基金公司、银行、第三方基金销售平台决定费率； 场内基金费用取决于开户的券商的佣金，佣金和证券交易一样 流动性不同： 场内基金流动相较好，到账时间较快。 可选基金数量不同： 场外基金数量多，选择余地大；场内基金数量少，类型少。 常见的宽基指数基金 1.上证50指数（000016） 上证指数是从上交所挑选沪市规模最大、流动性最好、最具代表性的50只股票组成的样本股。 特点 以大盘股为主，也成为蓝筹股，蓝筹出自西方赌场，赌场里蓝色筹码最为值钱。后来人们就用蓝筹股表示规模较大、有影响力的公司。 只有上交所的股票 2.沪深300指数（000300/399300） 沪深300是由中证指数公司开发的，从上交所和深交所挑选规模最大、流动性最好的300只股票。沪深300被认为是国内股市最具代表性的指数。 特点 以大盘股为主，兼顾上海和深圳上市公司 3.中证500指数 中证500是由中证指数公司开发，代表的是国内中等规模上市公司。该指数是将全部沪深300指数的300家公司排除，然后将最近一年日均总市值排名前300名的企业也排除，再剩下的公司中，选择日均总市值排名500名的企业 特点 以中型上市公司为主，与沪深300和上证50重合度很低。 4.创业板指数 上交所和深交所上市交易的股票大多在主板上市交易。但主板上市交易门槛很高，需要达到一定的规模和盈利。国家针对盈利条件不好的小公司创建了创业板。创业板是放在深交所下面的。 特点 相比主板指数，容易出现暴涨暴跌 5.红利指数 以上指数挑选股票时时按照市值加权的，即股票规模越大，权重越高。这类叫做市值加权。还有另一类股票是按照策略加权的方法挑选的。其中红利指数就是策略加权的一种，它是按照股息率决定权重，股息率越高的股票权重越大。所谓股息就是现金分红。 上证红利指数（000015）： 上交所过去两年平均现金股息率最高的50只股票。 中证红利指数（000922/399922）： 上交所和深交所过去两年平均现金股息率最高的100只股票。 从历史表现上来看，中证红利的历史收益要高于上证红利。 深证红利指数（399324）： 深交所过去两年平均现金股息率最高的40只股票。 红利机会指数 红利机会指数是在传统红利指数的基础上增加了三个要求： 过去三年盈利增长为正 ——&amp;gt;筛选掉盈利走下坡路的高分红股 过去净盈利必须为正 每只股票权重不超过3%，单个行业不超过33% ——&amp;gt;限制指数行业的占比 特点 高股息率，在熊市更有优势 能够持续发放现金股息的公司，盈利能力和财物健康状况好的概率越高 提供分红现金流 7.基本面指数 基本面指数也是策略加权的一种。一个公司的基本面包括: 营业收入 现金流 净资产 分红 基本面指数就是按照以上4个指标挑选股票。 中证基本面50指数特点 与上证50指数相近 挑选股票考虑得更加全面 8.恒生指数 恒生指数是港交所发行的港股指数基金。选取的是所有在中国香港上市的公司中规模最大的50家企业。 特点 历史悠久，成熟开放 跟内地紧密关联，但投资者以境外投资者为主。 “老千股”导致个股投资风险巨大 港股通 通过港股通内地可以更为方便地投资香港股票。 9.H股指数(恒生中国企业指数) 挑选在香港上市的内地企业中的股票。 特点 内地公司在境外的“代言人” 与内地经济紧密相关，但仍旧以境外投资者为主 多数H股公司也会在A股上市，H股与A股关系紧密 10.上证AH优选指数 对于同时在A股和H股上市的公司，买入AH股中相对便宜的，卖出相对贵的。 特点 成分股与上证50相同 成分股入选时，如果成分股同时具备A股和H股，选相对便宜的。 每个月第二周，进行依次轮动 11.纳斯达克100指数 纳斯达克规模最大的100家大型企业。 12.普标500指数 普标500是附带主观判断的蓝筹股指数，倾向于选择行业的领导者、长期盈利更好的公司。 行业指数基金 十个一级行业 材料：金属、采矿、化学制品 可选消费：汽车、零售、媒体、房地产 必需消费：食品、烟草、家居等 能源：能源设备、石油天然气等 金融：银行、保险、券商等 医药：医疗保健、制药、生物科技等 工业：航空航天、运输、建筑等 信息：硬件、软件、信息技术 电信：固定线路、无线通信、电信业务 公共事业：电力、天然气、水 值得投资的行业 天生赚钱更容易的行业 医药 必需消费 可选消费 养老 具有明显强周期性的行业 金融 能源 部分材料行业 必需消费行业 上证消费指数 上证消费80指数 中证消费指数 全指消费指数 医药行业 中证医药指数 中证医药100指数 上证医药指数 全指医药指数 细分医药指数 300医药指数 500医药指数 可选消费行业 需求比必需消费弱，有一定周期性 受益于人口红利，特别是人均消费金额的提升 可选消费的升级换代特性 养老行业 中证养老指数 特点 股票挑选方式是先保证各子行业的龙头入选，再按市值来挑选。养老产业指数主要是由医药行业、必须消费行业和可选消费行业混合的。因此具备医药和消费的优秀属性 强周期性行业之银行业 券商业绩会受牛市和熊市影响；银行会受宏观经济影响；航空会因为油价的波动而成本变化很大。 上证50指数、基本面50指数、H股指数、50AH优选指数。这四个指数中包含了很多银行股 中证银行指数 强周期性行业之证券业 中证全指证券行业指数 强周期性行业之地产行业 中证800地产指数 国证地产指数 地产等权指数 军工指数 中证军工指数 环保 中证环保指数 白酒 中证白酒指数 挑选适合投资的指数基金 价值投资的理念 低估值资产投资+指数基金 基本理论 价格与价值的关系 价格在长期内与其内在价值趋于一致 能力圈 能力圈理论要求我们对所投资品种非常了解，能大致判断出其内在价值。 安全边际 要用比价值更低的价格去买股票 常见的估值指标 市盈率 市盈率=$\frac{公司市值}{公司盈利}$ 静态市盈率： 公司上一个年度的净利润 滚动市盈率： 公司最近4个季度的净利润 动态市盈率： 预估的下一个年度的净利润 特点 市盈率反映我们愿意为1元的净利润付出多少代价 估算市值 市盈率的适用范围：流通性好、盈利稳定的品种 流通性好：股票流通性差意味着成交量低，如果需求大于成交量就会导致成交价大幅度上升。一般能够进入沪深300，中证500之类的股票流通性都没问题。 盈利稳定：对于没落行业、周期性行业（钢铁、煤炭、证券、航空航运）、处于成长期的行业其盈利并不稳定，并不适用市盈率。 盈利收益率 盈利收益率=$\frac{公司盈利}{公司市值}=\frac{1}{市盈率}$ 盈利收益率为市盈率的倒数，一般盈利收益率越高，代表公司的估值就越低，公司越有可能被低估。盈利收益率同样只适用于流通性好、盈利稳定的股票 市净率 市净率=$\frac{公司市值}{公司净资产}$ 净资产=资产-负债 影响市净率有效性的因素 净资产收益（ROE）:ROE=$\frac{净利润}{净资产}$ 资产的价值稳定性：有的资产会随时间增值，有的会随时间贬值。 无形资产：品牌、技术、专利、话语权等，如果一个公司主要考无形资产经营如律师事务所、广告、互联网公司等，那市盈率就没有多少参考价值。 负债大增或亏损：如果公司负债不稳定，会影响到净资产 当企业的资产大多是比较容易衡量价值的有形资产，并且长期保值时比较适合用市净率来估值 股息率 分红率=$\frac{过去一年的现金派息}{公司的总净利润}$ 股息率=$\frac{过去一年的现金派息}{公司总市值}=\frac{过去一年的现金派息}{公司的总净利润}\frac{公司的总净利润}{公司总市值}=分红率盈利收益率$ 一般分红率是公司预先设置好的，并且连续多年不会改变 查询指数的估值 指数基金可以计算估值，但普通的股票基金的信息往往不会公开 关注指数基金公众号 定投十年赚十倍 指数官网 金融终端 盈利收益率法挑选指数基金 当盈利收益率大于10%时开始定投 当盈利收益率低于10%时，停止定投，对已经定投的份额选择持有 当盈利收益率低于6.4%时，分批卖出基金份额 盈利收益率法的局限和适合品种 盈利收益率法只适合流通性比较好，盈利较稳定的品种。如果盈利增长速度较快，或者盈利波动较大的指数基金不适用。 适合的品种有上证红利、中证红利、上证50、基本面50、上证50AH优选、央视50、恒生指数、恒生中国指数等。 博格公式法挑选指数基金 影响指数基金收益的三大因素 初始投资时刻指数基金的股息率 投资期内指数基金的市盈率变化 投资期内指数基金的盈利增长率 指数基金的未来年复合收益率=指数基金的股息率+指数基金的市盈率变化率+指数基金的盈利增长率 根据以上三个因素，我们可以做到下面三点： 在股息率高得时候买入 在市盈率处于历史低位的时候买入 买入之后耐心等待均值回归 指数基金估值方法小结 对于盈利稳定的指数：适用盈利收益率法分析 对于盈利成高速增长态势的指数：使用博格公式判断，需要了解历史的市盈率波动范围 对于盈利不稳定状态或盈利承周期性变化，但行业没有长期亏损记录的指数：使用博格公式的变种，即当市净率处于历史市净率波动范围的较低区域，可以对其进行投资。 提高定投收益的技巧 降低交易基金的费用 费用类别 申购费赎回费：选择靠谱的网络平台申购，赎回费随时间增加降低 买卖佣金：基本费用在0.03%左右 销售服务费：C类基金不收取申购赎回费，但每年会收取销售服务费 印花税：印花税时针对场内基金的品种。目前股票交易的印花税为0.1%，单边收取，即买股票不收，卖股票才收。 分红税：持股不到一个月扣除20%的税；持股1个月至一年，扣除10%的税；持股一年以上，扣除5%的税。 所得税：国内基金交易不需要交。 降低费用的要诀 尽量选择费率较低的场外和场内渠道 不要过于频繁交易 成立1年以上的指数基金，在分红税上更有优势 定期不定额：盈利收益率法 当基金盈利收益率的时候，多投一些。 首次定投金额✖$\frac{当月盈利收益率}{首次的盈利收益率}$</summary></entry><entry><title type="html">计算机图形学（三）——着色（Shading）</title><link href="http://localhost:4000/2020/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9D%80%E8%89%B2.html" rel="alternate" type="text/html" title="计算机图形学（三）——着色（Shading）" /><published>2020-04-08T00:00:00+08:00</published><updated>2020-04-08T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E2%80%94%E2%80%94%E7%9D%80%E8%89%B2</id><content type="html" xml:base="http://localhost:4000/2020/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9D%80%E8%89%B2.html">&lt;h3 id=&quot;画家算法&quot;&gt;画家算法&lt;/h3&gt;

&lt;p&gt;在将场景投影到平面之前，还需要处理物体之间的遮挡关系。比如下面这张图左边的景色，在屏幕中成像的顺序根据远近分别为雪山、草地、树木。而在正方体图形中，成像顺序是先成像最远的面，再成像周围四个面，最后是最近的面。对于周围的四个面也需要设置一定的顺序使视图符合物理规则。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-cover1.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;但是对于下面这种摆放的物体，任何顺序都没有办法完全实现图中表述的位置关系。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-cover2.png&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;z-buffer&quot;&gt;Z Buffer&lt;/h3&gt;

&lt;p&gt;在实际使用中，我们不会用画家算法渲染图像，而是使用Z Buffer方法。Z Buffer方法有几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对每个图像中的像素存储当前最小的z值&lt;/li&gt;
  &lt;li&gt;需要一个额外的buffer存储深度值（这也是Z Buffer名称的由来）
    &lt;ul&gt;
      &lt;li&gt;frame buffer&lt;/li&gt;
      &lt;li&gt;depth buffer (为了简明性，我们认为z永远是正的)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Z-Buffer 算法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (each triangle T)
    for (each sample(x,y,z) in T)
        if (z &amp;lt; zbuffer[x,y])
            framebuffer[x,y] = rgb
            zbuffer[x,y] = z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;复杂度： 对于n个三角形，计算复杂度为O（n）,但对于n个三角形的处理，可以使用多线程加快处理速度。&lt;/p&gt;

&lt;h3 id=&quot;着色-shading&quot;&gt;着色 （Shading）&lt;/h3&gt;

&lt;p&gt;着色表示对不同材料应用不同属性
根据材质和位置不同，反光区域分为&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;镜面高光区域（Specular highlights）&lt;/li&gt;
  &lt;li&gt;漫反射区域 （Diffuse reflection）&lt;/li&gt;
  &lt;li&gt;环境光区域 (Ambient lighting)&lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;漫反射&quot;&gt;漫反射&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;漫反射的亮度和表面法向量和光源的夹角有关，夹角越小接受的能量越大，越明亮。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-diffuse_reflection.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;此外表面亮度还和距离光源的远近有关，光强与距离的平方成反比。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-fall_off.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;因此漫反射光的计算公式如下图，包括漫反射系数、不同距离的能量强度和反射面夹角这三个影响因素。&lt;strong&gt;对于漫反射，观测的角度不会影响表面的亮度，因为漫反射表面会均匀地向四周发射光波&lt;/strong&gt;。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-diffuse_energy.png&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;镜面反射高光区域blinn-phong&quot;&gt;镜面反射高光区域(Blinn-Phong)&lt;/h4&gt;

&lt;p&gt;在近似镜面的材质上，只有在反射光线很小的角度范围内才可以观察到。如下图所示，当观察角度与反射角度相近时，入射角度$\mathbf{n}$和观察角度$\mathbf{v}$的半程向量与平面的法向量很相近。其中半程向量表示的是观察角度与反射角度的&lt;strong&gt;角平分线方向&lt;/strong&gt;的单位向量。&lt;/p&gt;

&lt;p&gt;高光区域的表示公式如下，其中镜面反射系数为$k_s$，$max(0,\mathbf{n}\cdot \mathbf{h})$表示观察角度与入射角的夹角，指数$p$是为了使该项随角度的变化更加陡峭，实际中该指数项为100左右。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-mirror_reflection.png&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;环境光照&quot;&gt;环境光照&lt;/h4&gt;

&lt;p&gt;在物体背向光源的区域仍然可以被观察到，这是因为环境光照的原因。环境光照与观测角度无关。&lt;/p&gt;

\[L_a=k_aI_a\]

&lt;h4 id=&quot;着色公式&quot;&gt;着色公式&lt;/h4&gt;

&lt;p&gt;综合三种反射模型，一个物体表面的着色公式可以表示为：&lt;/p&gt;

\[\begin{aligned}
L &amp;amp;= L_a + L_d + L_s \\
  &amp;amp;=k_aI_a+k_d(I/r^2)max(0,\mathbf{n}\cdot\mathbf{l}) + k_s(I/r^2)max(0,\mathbf{n}\cdot\mathbf{h})
\end{aligned}\]

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading.png&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;着色频率&quot;&gt;着色频率&lt;/h3&gt;
&lt;p&gt;根据着色的方式不同，着色可以分为&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;平面着色(Flat shading)：根据分割的平面区域分别着色，对于平滑的表面效果不好。&lt;/li&gt;
  &lt;li&gt;顶点着色(Gouraud shading)：根据三角形的顶点计算着色数值，并在每个三角形内进行插值。&lt;/li&gt;
  &lt;li&gt;像素点着色(Phong shading)：计算每个像素点对应的数值。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下图所示为三种不同的着色方式，最左边是平面着色，中间是顶点着色，右边是像素点着色。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_frequence.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;随着着色频率的提高，也就是采样的面、三角形、像素数量越多，三种方法的着色效果都会越来越好。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_frequence1.png&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;顶点着色gouraud-shading中顶点法向量的计算&quot;&gt;顶点着色(Gouraud shading)中顶点法向量的计算&lt;/h4&gt;
&lt;p&gt;顶点的法向量是根据该顶点周围的平面法向量的加权得到的。如下图所示，点$v$的法向量是由周围4个平面的法向量加权得到的。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-gouraud_shading.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;因此该点的法向量通过下面公式可以计算得到，该公式是最基本的计算方式。更加有效的方法是&lt;strong&gt;根据三角形的面积大小对向量加权求和&lt;/strong&gt;。
\(N_v=\frac{\sum_iN_i}{\lVert \sum_iN_i\rVert}\)&lt;/p&gt;

&lt;h4 id=&quot;像素点着色phong-shading中顶点法向量的计算&quot;&gt;像素点着色(Phong shading)中顶点法向量的计算&lt;/h4&gt;
&lt;p&gt;像素点着色就是已知顶点的法向量，然后根据像素位置插值得到内部的法向量，如下图所示。该步骤会使用到重心插值方法（barycentric interpolation）。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-phong_shading.png&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;重心坐标法&quot;&gt;重心坐标法&lt;/h5&gt;

&lt;p&gt;重心坐标法解决的问题是，已知一个三角形的三个顶点，和三角形内部的一个点。如何对该点进行插值。&lt;/p&gt;

&lt;p&gt;对于任意一个三角形内部的点可以用三个顶点的加权和表示，如下图所示。三个权重的加和为1。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation.png
&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;其中权重的大小与下图中顶点对应的三角形面积有关，可以发现，对应的三角形面积越小，对应的权重也越小。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation1.png
&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;三角形的面积可以用叉乘的方法计算得到。也可以用下图中的公式计算。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation2.png
&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;em&gt;除了坐标外，任一点的属性如颜色、向量、深度等都可以用这三个权重插值计算得到。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;需要注意的一点是，&lt;strong&gt;重心坐标在投影之后位置会发生变化，因此要先找到三维的点，并对三维点插值后再投影到二维坐标。&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;投影校正插值perspective-correct-interpolation&quot;&gt;投影校正插值（Perspective Correct Interpolation）&lt;/h5&gt;

&lt;p&gt;对于屏幕空间上的一个三角形区域内的任意一个点，我们通过重心坐标法能够得到权重系数$\alpha,\beta,\gamma$。但这只是对应于屏幕上的三角形的权重，我们需要得到三维空间中的三角形对应的权重。&lt;/p&gt;

&lt;p&gt;首先我们先考虑二维空间下的深度计算。如下图所示，$(x_1,z_1),(x_0,z_0)$所在线段为屏幕，对应空间中的点为$(x’_1,z’_1),(x’_0,z’_0)$。现在的问题是，已知屏幕中一点$(x_p,z_p)$求空间中的点$(x’_p,z’_p)$。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation3.png
&quot; /&gt;
&lt;/center&gt;

&lt;ol&gt;
  &lt;li&gt;根据三角形相似定理有：$\frac{x’}{x} =\frac{z’}{z}$&lt;/li&gt;
  &lt;li&gt;空间中的点满足直线方程：$ax+bz=c，c\ne0$&lt;/li&gt;
  &lt;li&gt;结合以上两个公式可以得到$\frac{1}{z’}=\frac{ax}{cz}+\frac{b}{c}$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将$z’_p$代入公式：&lt;/p&gt;

\[\begin{aligned}
\frac{1}{z'_p}&amp;amp;=\frac{ax_p}{cz_p}+\frac{b}{c}\\
&amp;amp;=\frac{a((1-t)x_0+tx_1)}{cz} + \frac{b}{c}\\
&amp;amp;=(1-t)(\frac{ax_0}{c}+\frac{b}{c})+t(\frac{ax_1}{c}+\frac{b}{c}) \\
&amp;amp;=(1-t)\frac{1}{z'_0}+t\frac{1}{z'_1}
\end{aligned}\]

&lt;p&gt;根据公式$\frac{1}{z’_p}=(1-t)\frac{1}{z_0}+t\frac{1}{z_1}$我们发现屏幕上的一点在空间中对应的点关于z的倒数是线性的。根据这个规律，我们用z对三角形中任意一点的属性$b_p$插值,有以下线性关系：&lt;/p&gt;

\[\frac{b_p-b_0}{b_1-b_0}=\frac{z'_p-z'_0}{z'_1-z'_0}\]

&lt;p&gt;将$z’_p=\frac{1}{(1-t)\frac{1}{z_0}+t\frac{1}{z_1}}$代入上式，化简得到：&lt;/p&gt;

\[\begin{aligned}
b_p&amp;amp;=\frac{(1-t)\frac{b_0}{z'_0}+t\frac{b_1}{z'_1}}{(1-t)\frac{1}{z'_0}+t\frac{1}{z'_1}}\\
&amp;amp;=z_p\left[(1-t)\frac{b_0}{z'_0}+t\frac{b_1}{z'_1} \right]
\end{aligned}\]

&lt;p&gt;下图中三角形内的方格与直角边平行，左图和右图分别为不经过校正和经过校正之后插值得到屏幕投影，很明显不经过透视校正插值的结果的错误的。&lt;/p&gt;
&lt;center&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation4.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation5.png height=200 border=0&amp;gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/center&gt;

&lt;h3 id=&quot;实时渲染管线real-time-rendering-pipeline&quot;&gt;实时渲染管线（Real-time Rendering Pipeline）&lt;/h3&gt;

&lt;p&gt;实时渲染步骤包括：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;将3D空间中的点投影到屏幕空间中-&amp;gt;&lt;strong&gt;Vertex Stream&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;将屏幕中的顶点连接成三角形-&amp;gt;&lt;strong&gt;Triangle Stream&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;将三角形内部的点光栅化为像素点-&amp;gt;&lt;strong&gt;Fragment Stream&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;光栅化&lt;/li&gt;
      &lt;li&gt;深度测试（Z Buffer）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;将像素点着色-&amp;gt;&lt;strong&gt;Shaded fragments&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;将着色的三角形拼接成完整的图像-&amp;gt;&lt;strong&gt;Output image&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-pipeline.png&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;纹理&quot;&gt;纹理&lt;/h3&gt;

&lt;p&gt;我们着色时需要根据外表的纹理对每个像素计算对应的值。&lt;/p&gt;

&lt;p&gt;我们可以发现任何一个三维物体的表面都是二维的，所以物体表面的纹理可以用二维的图表示，纹理映射就是获得纹理和物体表面的映射关系。&lt;/p&gt;

&lt;p&gt;如下图所示，三维表面的三角形顶点在右边的二维图片中都有相应的对应点。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_texture.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;由于映射的纹理和实际的像素没办法一一对应，有些时候投影后的一个纹理会包括多个像素点，有些时候一个像素会包括多个纹理。为了使着重的着色效果更好，就需要讨论到纹理和像素之间的映射方法。&lt;/p&gt;

&lt;h4 id=&quot;纹理映射&quot;&gt;纹理映射&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;对于屏幕中的每一个像素点（x,y），计算对应的纹理坐标（u，v）-&amp;gt; 重心坐标法&lt;/li&gt;
  &lt;li&gt;查询坐标（u,v）所对应的纹理，包括反射率等信息&lt;/li&gt;
  &lt;li&gt;运用反射模型计算对应的颜色 -&amp;gt;Blinn-Phong模型&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;纹理映射存在的问题&quot;&gt;纹理映射存在的问题&lt;/h4&gt;

&lt;h5 id=&quot;当纹理分辨率低于屏幕分辨率&quot;&gt;当纹理分辨率低于屏幕分辨率&lt;/h5&gt;
&lt;p&gt;当纹理分辨率低于屏幕分辨率时，如果像素点只找最临近的纹理就会出现锯齿。为了提高画面的细腻程度，需要对像素点的颜色进行插值。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_texture1.png&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;双线性插值&quot;&gt;双线性插值&lt;/h5&gt;

&lt;p&gt;双线性插值是分别在水平和竖直上对周围最相邻的两个点插值。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_texture2.png&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;当纹理分辨率高于屏幕分辨率&quot;&gt;当纹理分辨率高于屏幕分辨率&lt;/h5&gt;
&lt;p&gt;当纹理分辨率高于屏幕分辨率时，则会出现走样的问题，如下图所示，图中的远处，一个像素内部有多个纹素。解决走样的问题可以使用MSAA方法进行超采样解决，但该方法十分费时。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_texture3.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;为了更为高效地解决这个问题，我们不使用采样地方法，而是只需要&lt;strong&gt;获得一个范围内的平均值就可以&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;该问题可以理解为一个&lt;strong&gt;范围查询&lt;/strong&gt;的问题。我们上面讲到的双线性插值是一个&lt;strong&gt;点查询&lt;/strong&gt;问题。二者的不同是范围查询询问的是一个范围内的值，而点查询询问的是最近邻点的值。&lt;/p&gt;

&lt;p&gt;在我们的问题中，就是给定一个点，再给定一个区域。如何快速地知道这个区域的平均值是多少。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-shading_texture4.png&quot; /&gt;
&lt;/center&gt;

&lt;h5 id=&quot;mipmap&quot;&gt;Mipmap&lt;/h5&gt;

&lt;p&gt;Mipmap是一种范围查询方法，它有以下特点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;近似&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;只能做正方形的范围查询&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;mipmap方法首先要对纹理图像生成不同层次的图像。如下图所示，层次越高，分辨率越低。并且降低的倍数为1/2。这部分操作需要耗费额外的1/3的存储。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-mipmap.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;然后我们将屏幕空间的像素（x,y）映射到纹理空间(u,v)。之后就可以计算像素空间中的近邻点在纹理空间中的距离。最终的距离L可以根据下图的公式计算得到。而层数为&lt;/p&gt;

\[D=log_2L\]

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-mipmap1.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;通过上面的方法，我们就可以得到采样点对应的层数，我们只需要在对应层数的图像上索引对应的值即可。&lt;/p&gt;

&lt;p&gt;但是由于层数为整数值，如果按照取整的方法会出现&lt;strong&gt;不连续&lt;/strong&gt;的情况。因此我们计算得到D之后，我们&lt;strong&gt;对D所在的两层之间插值&lt;/strong&gt;得到D所对应的值。如下图所示，分别在两个层内部做双线性插值之后再将两个结果插值。该方法叫做&lt;strong&gt;三线性插值（Trilinear Interpolation）&lt;/strong&gt;。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-mipmap2.png&quot; /&gt;
&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;Mipmap的缺陷&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下图是经过Mipmap插值之后的的图片。近处的图像效果正常，但远处的细节完全消失，出现过模糊（Overblur）的问题。这是因为Mipmap只能处理正方形的图块，没有办法处理像素投影到纹理空间后呈长条状的情况。&lt;/p&gt;

&lt;h5 id=&quot;各向异性滤波anisotropic-filtering&quot;&gt;各向异性滤波（Anisotropic Filtering）&lt;/h5&gt;

&lt;p&gt;各项异性滤波和Mipmap的不同之处是生成了长宽比不一样的一系列图像。通过这种方法将原本的正方形近似扩大到矩形近似。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-anisotropic.png&quot; /&gt;
&lt;/center&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-anisotropic.png&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;但是各向异性滤波方法还是存在问题，就是没有办法近似倾斜的多边形。&lt;/p&gt;

&lt;h5 id=&quot;椭圆加权平均滤波ewa-filtering&quot;&gt;椭圆加权平均滤波（EWA Filtering）&lt;/h5&gt;

&lt;p&gt;EWA方法与Miamap方法和各向异性滤波方法在图像层和距离的计算上相同，不同之处在于使用椭圆的长宽表示覆盖的区域。得到椭圆之后确定对应的包围盒，并询问在椭圆内部的纹素并求平均。&lt;/p&gt;</content><author><name>XPX</name></author><category term="计算机图形学" /><summary type="html">画家算法 在将场景投影到平面之前，还需要处理物体之间的遮挡关系。比如下面这张图左边的景色，在屏幕中成像的顺序根据远近分别为雪山、草地、树木。而在正方体图形中，成像顺序是先成像最远的面，再成像周围四个面，最后是最近的面。对于周围的四个面也需要设置一定的顺序使视图符合物理规则。 但是对于下面这种摆放的物体，任何顺序都没有办法完全实现图中表述的位置关系。 Z Buffer 在实际使用中，我们不会用画家算法渲染图像，而是使用Z Buffer方法。Z Buffer方法有几个特点： 对每个图像中的像素存储当前最小的z值 需要一个额外的buffer存储深度值（这也是Z Buffer名称的由来） frame buffer depth buffer (为了简明性，我们认为z永远是正的) Z-Buffer 算法 for (each triangle T) for (each sample(x,y,z) in T) if (z &amp;lt; zbuffer[x,y]) framebuffer[x,y] = rgb zbuffer[x,y] = z 复杂度： 对于n个三角形，计算复杂度为O（n）,但对于n个三角形的处理，可以使用多线程加快处理速度。 着色 （Shading） 着色表示对不同材料应用不同属性 根据材质和位置不同，反光区域分为 镜面高光区域（Specular highlights） 漫反射区域 （Diffuse reflection） 环境光区域 (Ambient lighting) 漫反射 漫反射的亮度和表面法向量和光源的夹角有关，夹角越小接受的能量越大，越明亮。 此外表面亮度还和距离光源的远近有关，光强与距离的平方成反比。 因此漫反射光的计算公式如下图，包括漫反射系数、不同距离的能量强度和反射面夹角这三个影响因素。对于漫反射，观测的角度不会影响表面的亮度，因为漫反射表面会均匀地向四周发射光波。 镜面反射高光区域(Blinn-Phong) 在近似镜面的材质上，只有在反射光线很小的角度范围内才可以观察到。如下图所示，当观察角度与反射角度相近时，入射角度$\mathbf{n}$和观察角度$\mathbf{v}$的半程向量与平面的法向量很相近。其中半程向量表示的是观察角度与反射角度的角平分线方向的单位向量。 高光区域的表示公式如下，其中镜面反射系数为$k_s$，$max(0,\mathbf{n}\cdot \mathbf{h})$表示观察角度与入射角的夹角，指数$p$是为了使该项随角度的变化更加陡峭，实际中该指数项为100左右。 环境光照 在物体背向光源的区域仍然可以被观察到，这是因为环境光照的原因。环境光照与观测角度无关。 \[L_a=k_aI_a\] 着色公式 综合三种反射模型，一个物体表面的着色公式可以表示为： \[\begin{aligned} L &amp;amp;= L_a + L_d + L_s \\ &amp;amp;=k_aI_a+k_d(I/r^2)max(0,\mathbf{n}\cdot\mathbf{l}) + k_s(I/r^2)max(0,\mathbf{n}\cdot\mathbf{h}) \end{aligned}\] 着色频率 根据着色的方式不同，着色可以分为 平面着色(Flat shading)：根据分割的平面区域分别着色，对于平滑的表面效果不好。 顶点着色(Gouraud shading)：根据三角形的顶点计算着色数值，并在每个三角形内进行插值。 像素点着色(Phong shading)：计算每个像素点对应的数值。 下图所示为三种不同的着色方式，最左边是平面着色，中间是顶点着色，右边是像素点着色。 随着着色频率的提高，也就是采样的面、三角形、像素数量越多，三种方法的着色效果都会越来越好。 顶点着色(Gouraud shading)中顶点法向量的计算 顶点的法向量是根据该顶点周围的平面法向量的加权得到的。如下图所示，点$v$的法向量是由周围4个平面的法向量加权得到的。 因此该点的法向量通过下面公式可以计算得到，该公式是最基本的计算方式。更加有效的方法是根据三角形的面积大小对向量加权求和。 \(N_v=\frac{\sum_iN_i}{\lVert \sum_iN_i\rVert}\) 像素点着色(Phong shading)中顶点法向量的计算 像素点着色就是已知顶点的法向量，然后根据像素位置插值得到内部的法向量，如下图所示。该步骤会使用到重心插值方法（barycentric interpolation）。 重心坐标法 重心坐标法解决的问题是，已知一个三角形的三个顶点，和三角形内部的一个点。如何对该点进行插值。 对于任意一个三角形内部的点可以用三个顶点的加权和表示，如下图所示。三个权重的加和为1。 其中权重的大小与下图中顶点对应的三角形面积有关，可以发现，对应的三角形面积越小，对应的权重也越小。 三角形的面积可以用叉乘的方法计算得到。也可以用下图中的公式计算。 除了坐标外，任一点的属性如颜色、向量、深度等都可以用这三个权重插值计算得到。 需要注意的一点是，重心坐标在投影之后位置会发生变化，因此要先找到三维的点，并对三维点插值后再投影到二维坐标。 投影校正插值（Perspective Correct Interpolation） 对于屏幕空间上的一个三角形区域内的任意一个点，我们通过重心坐标法能够得到权重系数$\alpha,\beta,\gamma$。但这只是对应于屏幕上的三角形的权重，我们需要得到三维空间中的三角形对应的权重。 首先我们先考虑二维空间下的深度计算。如下图所示，$(x_1,z_1),(x_0,z_0)$所在线段为屏幕，对应空间中的点为$(x’_1,z’_1),(x’_0,z’_0)$。现在的问题是，已知屏幕中一点$(x_p,z_p)$求空间中的点$(x’_p,z’_p)$。 根据三角形相似定理有：$\frac{x’}{x} =\frac{z’}{z}$ 空间中的点满足直线方程：$ax+bz=c，c\ne0$ 结合以上两个公式可以得到$\frac{1}{z’}=\frac{ax}{cz}+\frac{b}{c}$ 将$z’_p$代入公式： \[\begin{aligned} \frac{1}{z'_p}&amp;amp;=\frac{ax_p}{cz_p}+\frac{b}{c}\\ &amp;amp;=\frac{a((1-t)x_0+tx_1)}{cz} + \frac{b}{c}\\ &amp;amp;=(1-t)(\frac{ax_0}{c}+\frac{b}{c})+t(\frac{ax_1}{c}+\frac{b}{c}) \\ &amp;amp;=(1-t)\frac{1}{z'_0}+t\frac{1}{z'_1} \end{aligned}\] 根据公式$\frac{1}{z’_p}=(1-t)\frac{1}{z_0}+t\frac{1}{z_1}$我们发现屏幕上的一点在空间中对应的点关于z的倒数是线性的。根据这个规律，我们用z对三角形中任意一点的属性$b_p$插值,有以下线性关系： \[\frac{b_p-b_0}{b_1-b_0}=\frac{z'_p-z'_0}{z'_1-z'_0}\] 将$z’_p=\frac{1}{(1-t)\frac{1}{z_0}+t\frac{1}{z_1}}$代入上式，化简得到： \[\begin{aligned} b_p&amp;amp;=\frac{(1-t)\frac{b_0}{z'_0}+t\frac{b_1}{z'_1}}{(1-t)\frac{1}{z'_0}+t\frac{1}{z'_1}}\\ &amp;amp;=z_p\left[(1-t)\frac{b_0}{z'_0}+t\frac{b_1}{z'_1} \right] \end{aligned}\] 下图中三角形内的方格与直角边平行，左图和右图分别为不经过校正和经过校正之后插值得到屏幕投影，很明显不经过透视校正插值的结果的错误的。 &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation4.png height=200 border=0&amp;gt; &amp;lt;img src=https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/shading-barycentric_interpolation5.png height=200 border=0&amp;gt; 实时渲染管线（Real-time Rendering Pipeline） 实时渲染步骤包括： 将3D空间中的点投影到屏幕空间中-&amp;gt;Vertex Stream 将屏幕中的顶点连接成三角形-&amp;gt;Triangle Stream 将三角形内部的点光栅化为像素点-&amp;gt;Fragment Stream 光栅化 深度测试（Z Buffer） 将像素点着色-&amp;gt;Shaded fragments 将着色的三角形拼接成完整的图像-&amp;gt;Output image 纹理 我们着色时需要根据外表的纹理对每个像素计算对应的值。 我们可以发现任何一个三维物体的表面都是二维的，所以物体表面的纹理可以用二维的图表示，纹理映射就是获得纹理和物体表面的映射关系。 如下图所示，三维表面的三角形顶点在右边的二维图片中都有相应的对应点。 由于映射的纹理和实际的像素没办法一一对应，有些时候投影后的一个纹理会包括多个像素点，有些时候一个像素会包括多个纹理。为了使着重的着色效果更好，就需要讨论到纹理和像素之间的映射方法。 纹理映射 对于屏幕中的每一个像素点（x,y），计算对应的纹理坐标（u，v）-&amp;gt; 重心坐标法 查询坐标（u,v）所对应的纹理，包括反射率等信息 运用反射模型计算对应的颜色 -&amp;gt;Blinn-Phong模型 纹理映射存在的问题 当纹理分辨率低于屏幕分辨率 当纹理分辨率低于屏幕分辨率时，如果像素点只找最临近的纹理就会出现锯齿。为了提高画面的细腻程度，需要对像素点的颜色进行插值。 双线性插值 双线性插值是分别在水平和竖直上对周围最相邻的两个点插值。 当纹理分辨率高于屏幕分辨率 当纹理分辨率高于屏幕分辨率时，则会出现走样的问题，如下图所示，图中的远处，一个像素内部有多个纹素。解决走样的问题可以使用MSAA方法进行超采样解决，但该方法十分费时。 为了更为高效地解决这个问题，我们不使用采样地方法，而是只需要获得一个范围内的平均值就可以。 该问题可以理解为一个范围查询的问题。我们上面讲到的双线性插值是一个点查询问题。二者的不同是范围查询询问的是一个范围内的值，而点查询询问的是最近邻点的值。 在我们的问题中，就是给定一个点，再给定一个区域。如何快速地知道这个区域的平均值是多少。 Mipmap Mipmap是一种范围查询方法，它有以下特点： 快速 近似 只能做正方形的范围查询 mipmap方法首先要对纹理图像生成不同层次的图像。如下图所示，层次越高，分辨率越低。并且降低的倍数为1/2。这部分操作需要耗费额外的1/3的存储。 然后我们将屏幕空间的像素（x,y）映射到纹理空间(u,v)。之后就可以计算像素空间中的近邻点在纹理空间中的距离。最终的距离L可以根据下图的公式计算得到。而层数为 \[D=log_2L\] 通过上面的方法，我们就可以得到采样点对应的层数，我们只需要在对应层数的图像上索引对应的值即可。 但是由于层数为整数值，如果按照取整的方法会出现不连续的情况。因此我们计算得到D之后，我们对D所在的两层之间插值得到D所对应的值。如下图所示，分别在两个层内部做双线性插值之后再将两个结果插值。该方法叫做三线性插值（Trilinear Interpolation）。 Mipmap的缺陷 下图是经过Mipmap插值之后的的图片。近处的图像效果正常，但远处的细节完全消失，出现过模糊（Overblur）的问题。这是因为Mipmap只能处理正方形的图块，没有办法处理像素投影到纹理空间后呈长条状的情况。 各向异性滤波（Anisotropic Filtering） 各项异性滤波和Mipmap的不同之处是生成了长宽比不一样的一系列图像。通过这种方法将原本的正方形近似扩大到矩形近似。 但是各向异性滤波方法还是存在问题，就是没有办法近似倾斜的多边形。 椭圆加权平均滤波（EWA Filtering） EWA方法与Miamap方法和各向异性滤波方法在图像层和距离的计算上相同，不同之处在于使用椭圆的长宽表示覆盖的区域。得到椭圆之后确定对应的包围盒，并询问在椭圆内部的纹素并求平均。</summary></entry><entry><title type="html">排版工具</title><link href="http://localhost:4000/2020/04/03/%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7.html" rel="alternate" type="text/html" title="排版工具" /><published>2020-04-03T00:00:00+08:00</published><updated>2020-04-03T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/03/%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7</id><content type="html" xml:base="http://localhost:4000/2020/04/03/%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7.html">&lt;h2 id=&quot;图片转latex公式&quot;&gt;图片转Latex公式&lt;/h2&gt;

&lt;p&gt;发现一个特别好用的图片转Latex软件，叫做Mathpix。&lt;/p&gt;

&lt;p&gt;官网地址：&lt;a href=&quot;https://mathpix.com&quot;&gt;https://mathpix.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装好之后打开，选择要转换的图片截图，识别粗来的Latex公式就在下面第一行。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/typesetting-mathpix.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;如果要复制MathML的话，选择Data栏，第二行就是了。&lt;/p&gt;

&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/typesetting-mathpix1.png&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;在线数学编辑器&quot;&gt;在线数学编辑器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mathcha.io/&quot;&gt;www.mathcha.io&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;配置博客中的mathjax引擎&quot;&gt;配置博客中的MathJax引擎&lt;/h2&gt;
&lt;p&gt;搭建博客后发现网页的Markdown不支持数学公式编辑。在网上搜了一下之后发现可以使用MathJax实现公式的渲染。&lt;/p&gt;

&lt;p&gt;MathJax是一个开源的 web 数学公式渲染器，由 JS 编写而成。&lt;/p&gt;

&lt;p&gt;添加MathJax引擎只需要将引入CDN的script语句添加到head标签内部。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/x-mathjax-config&quot;&amp;gt;
    MathJax.Hub.Config({
        tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
        inlineMath: [['$','$']]
        }
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;常用的mathjax语法&quot;&gt;常用的MathJax语法&lt;/h2&gt;
&lt;p&gt;可以查阅的网址:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&lt;/li&gt;
  &lt;li&gt;https://colobu.com/2014/08/17/MathJax-quick-reference/&lt;/li&gt;
  &lt;li&gt;https://www.hegongshan.com/2018/07/16/mathjax-tutorial/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>XPX</name></author><category term="公式排版" /><summary type="html">图片转Latex公式 发现一个特别好用的图片转Latex软件，叫做Mathpix。 官网地址：https://mathpix.com 安装好之后打开，选择要转换的图片截图，识别粗来的Latex公式就在下面第一行。 如果要复制MathML的话，选择Data栏，第二行就是了。 在线数学编辑器 www.mathcha.io 配置博客中的MathJax引擎 搭建博客后发现网页的Markdown不支持数学公式编辑。在网上搜了一下之后发现可以使用MathJax实现公式的渲染。 MathJax是一个开源的 web 数学公式渲染器，由 JS 编写而成。 添加MathJax引擎只需要将引入CDN的script语句添加到head标签内部。 &amp;lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&quot;text/x-mathjax-config&quot;&amp;gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &amp;lt;/script&amp;gt; 常用的MathJax语法 可以查阅的网址: https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference https://colobu.com/2014/08/17/MathJax-quick-reference/ https://www.hegongshan.com/2018/07/16/mathjax-tutorial/</summary></entry><entry><title type="html">数学基础——傅里叶变换</title><link href="http://localhost:4000/2020/04/02/%E6%95%B0%E5%AD%A6-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2.html" rel="alternate" type="text/html" title="数学基础——傅里叶变换" /><published>2020-04-02T00:00:00+08:00</published><updated>2020-04-02T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/02/%E6%95%B0%E5%AD%A6%E2%80%94%E2%80%94%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2</id><content type="html" xml:base="http://localhost:4000/2020/04/02/%E6%95%B0%E5%AD%A6-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2.html">&lt;h2 id=&quot;傅里叶级数&quot;&gt;傅里叶级数&lt;/h2&gt;
&lt;p&gt;首先我们先介绍最简单的余弦函数,可以看见随着余弦函数频率的增加，函数的周期变得更短。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-frequency.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;根据傅里叶级数，对于一个方波信号，是可以用很多个不同频率的余弦信号近似。从下图可以看到，随着频率更高的余弦函数加入，由余弦函数组成的信号就和方波更加接近。&lt;/p&gt;
&lt;center&gt;
    &lt;img src=&quot;https://xpx-picbed.oss-cn-beijing.aliyuncs.com/blog/2020/04/rasterization-fourier1.gif&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;对于任意的函数都可以展开成下面形式的三角级数:&lt;/p&gt;

\[f(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}[a_n\cos(n\omega t)+b_n\sin(n\omega t)]  \\
a_0=\frac{2}{T}\int_{t_0}^{t_0+T}f(t)dt \\
a_n = \frac{2}{T}\int_{t_0}^{t_0+T}f(t)\cos(n\omega t)dt \\
b_n = \frac{2}{T}\int_{t_0}^{t_0+T}f(t)\sin(n\omega t)dt\]

&lt;p&gt;以上就是三角形式的傅里叶级数.详细的推导可以参照&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41455378&quot;&gt;ElPsyCongree的知乎专栏&lt;/a&gt;中傅里叶级数部分.&lt;/p&gt;

&lt;h2 id=&quot;连续傅里叶变换&quot;&gt;连续傅里叶变换&lt;/h2&gt;

&lt;h4 id=&quot;欧拉公式&quot;&gt;欧拉公式&lt;/h4&gt;
&lt;p&gt;欧拉公式是复分析领域的公式，它将三角函数与复指数函数关联起来.其基本公式为:&lt;/p&gt;

\[e^{i\theta}=\cos \theta+i\sin \theta\]

&lt;p&gt;其中$e$是自然对数的底数，$i$ 是虚数单位，而 $\cos$ 和 $\sin$ 则是余弦、正弦对应的三角函数，参数 $\theta$ 则以弧度为单位。&lt;/p&gt;

&lt;p&gt;经过简单的变形之后可以得到:&lt;/p&gt;

\[\cos \theta = \frac{e^{i\theta}+e^{-i\theta}}{2}\]

\[\sin \theta = -i\frac{e^{i\theta}-e^{-i\theta}}{2}\]

&lt;h4 id=&quot;指数形式的傅里叶级数&quot;&gt;指数形式的傅里叶级数&lt;/h4&gt;
&lt;p&gt;$\cos \theta$和$\sin \theta$代入傅里叶级数之后可以得到:&lt;/p&gt;

\[f(t) = \frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n\frac{e^{in\omega t}+e^{-in\omega t}}{2} - ib_n\frac{e^{in\omega t}-e^{-in\omega t}}{2})\\=
\frac{a_0}{2}+\sum_{n=1}^{\infty}(\frac{a_n-ib_n}{2}e^{in\omega t}+\frac{a_n+ib_n}{2}e^{-in\omega t})\tag{1}\]

&lt;p&gt;再将$a_0,a_n,b_n$的公式代入得到:&lt;/p&gt;

\[\begin{aligned}
\frac{a_n-ib_n}{2}&amp;amp;=\frac{1}{T}[\int^{t_0+T}_{t_0}f(t)\cos(n\omega t)dt - i \int^{t_0+T}_{t_0}f(t)\sin(n\omega t)dt]\\
&amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)[\cos(n\omega t)- i\sin(n\omega t)]dt \\
&amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)[\frac{e^{in\omega t}+e^{-in\omega t}}{2}-i\cdot (-i)\cdot \frac{e^{in\omega t}-e^{-in\omega t}}{2}]dt\\
&amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt
\end{aligned} \tag{2}\]

&lt;p&gt;同理可以得到&lt;/p&gt;

\[\frac{a_n+ib_n}{2}=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)e^{in\omega t}dt\tag{3}\]

&lt;p&gt;将公式(2)(3)代入(1)得到:&lt;/p&gt;

\[\begin{aligned}
f(t) &amp;amp;= \frac{1}{T} \int^{t_0+T}_{t_0}f(t)dt + \frac{1}{T}\sum_{n=1}^{\infty}[\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}+\int^{t_0+T}_{t_0}f(t)e^{in\omega t}dt \cdot e^{-in\omega t}]\\
&amp;amp;=\frac{1}{T} \int^{t_0+T}_{t_0}f(t)dt + \frac{1}{T}\sum_{n=1}^{\infty}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}+\frac{1}{T}\sum_{n=-\infty}^{0}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}\\
&amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t} \\
&amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}\int^{\frac{T}{2}}_{-\frac{T}{2}}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}
\end{aligned}\tag{4}\]

&lt;p&gt;令&lt;/p&gt;

\[F(n\omega)=\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt\]

&lt;p&gt;则有:&lt;/p&gt;

\[f(t)=\frac{1}{T}\sum_{n=-\infty}^{\infty}F(nw)e^{in\omega t}\]

&lt;p&gt;我们令$w_n=n\omega$,则有:&lt;/p&gt;

\[F(\omega_n)=\int^{t_0+T}_{t_0}f(t)e^{-i\omega_n t}dt\]

&lt;p&gt;由于$\omega=\frac{2\pi}{T}$:&lt;/p&gt;

\[\begin{aligned}
f(t)&amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\
&amp;amp;=\frac{\omega}{2\pi}\sum_{n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\
&amp;amp;=\frac{1}{2\pi}\sum_{\omega_n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\
&amp;amp;=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(w_n)e^{i\omega_n t}d\omega_n
\end{aligned}\]

&lt;p&gt;最终可以得到傅里叶变换对:&lt;/p&gt;

\[F(\omega)=\int^{t_0+T}_{t_0}f(t)e^{-i\omega t}dt \tag{5}\]

\[f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}d\omega\tag{6}\]

&lt;h2 id=&quot;离散傅里叶变换&quot;&gt;离散傅里叶变换&lt;/h2&gt;

&lt;p&gt;离散傅里叶变换是傅里叶变换在时域和频域上都呈离散的形式，将信号的时域采样变换为其DTFT的频域采样。
在形式上，变换两端（时域和频域上）的序列是有限长的，而实际上这两组序列都应当被认为是离散周期信号的主值序列。即使对有限长的离散信号作DFT，也应当将其看作其周期延拓的变换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFT就是先将信号在时域离散化，求其连续傅里叶变换后，再在频域离散化的结果。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在获得离散傅里叶变换之前需要先对连续函数采样,因此,在介绍离散傅里叶变换之前,我们先讲一下采样定理.&lt;/p&gt;

&lt;h4 id=&quot;采样定理&quot;&gt;采样定理&lt;/h4&gt;

&lt;p&gt;采样定理是美国电信工程师H.奈奎斯特在1928年提出的，在数字信号处理领域中，采样定理是连续时间信号（通常称为“模拟信号”）和离散时间信号（通常称为“数字信号”）之间的基本桥梁。&lt;/p&gt;

&lt;p&gt;在进行模拟/数字信号的转换过程中，当采样频率$f_{s.max}$大于信号中最高频率$f_{max}$的2倍时($f_{s.max} &amp;gt; 2f_{max}$)，采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。&lt;/p&gt;

&lt;h4 id=&quot;离散时间傅里叶变换discrete-time-fourier-transformdtft&quot;&gt;离散时间傅里叶变换(Discrete-time Fourier Transform,DTFT)&lt;/h4&gt;
&lt;p&gt;假设将(0,L)区间的f(t)通过时域采样的方式离散化,得到有限长的离散信号. 我们设定采样周期为 $T$,则在该时域的采样点数为$N=\frac{L}{T}$,&lt;em&gt;这边由于符号冲突,我们用L表示之前的时域T,用现在的T表示采样的周期&lt;/em&gt;&lt;/p&gt;

\[f_{discrete}(t)=f(t)\sum_{n=0}^{N-1}\delta(t-nT)=\sum_{n=0}^{N-1}f(nT)\delta(t-nT)\]

&lt;p&gt;我们对$f_{discrete}(t)$进行傅里叶变换,根据傅里叶变换的时移特性,可以得到:&lt;/p&gt;

\[\hat f(\omega)=\sum_{n=0}^{N-1}f(nT)\mathcal{F}(\delta(t-nT))=\sum_{n=0}^{N-1}f(nT)e^{-in\omega T}\]

&lt;p&gt;$\hat f(\omega)$就是在时域采样后的连续傅里叶变换,也就是离散时间傅里叶变换(Discrete-time Fourier Transform,DTFT),它在频域上还是连续的.&lt;/p&gt;

&lt;p&gt;当对时域采样区间为$(-\infty,\infty)$时，有&lt;/p&gt;

\[\hat f(\omega)=\sum_{n=-\infty}^{\infty}f(nT)e^{-in\omega T}\]

&lt;p&gt;对于采样后的信号来说，我们有时候并不在意它原始的采样率。因此我们令$f[n]=f(nT)$,$\hat f(\omega) = \hat f(\omega T)$,得到&lt;/p&gt;

&lt;p&gt;\(\hat f(\omega)=\sum_{n=-\infty}^{\infty}f[n]e^{-in\omega}\)&lt;/p&gt;
&lt;h4 id=&quot;离散傅里叶变换discrete-fourier-transform&quot;&gt;离散傅里叶变换(Discrete Fourier Transform)&lt;/h4&gt;

&lt;p&gt;本部分时将频域上连续的信号转化成离散信号。与对时域信号的处理类似，假设频域信号是带限的，再经过离散化，即可得到有限长离散信号。&lt;strong&gt;对频域的均匀采样实际上是对时域的周期延拓,其周期为频域采样周期的导数.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据我们上上部分提到的采样定理,时域采样若要能完全重建原信号，频域信号$\hat f(\omega)$应当带限于$(0,\frac{1}{2T})$.即频域的信号不能大于$\frac{1}{2T}$.&lt;/p&gt;

&lt;p&gt;由于时域信号受限于$[0,L]$,根据采样定理以及时频对偶的关系，频域的采样间隔应为$\frac{1}{L}$.采样数为:&lt;/p&gt;

\[\frac{1/T}{1/L}=N\]

&lt;p&gt;即频域采样的点数和时域采样都为N.&lt;em&gt;如果频域采样点数小于时域点数,即实际的频域采样间隔$f&amp;gt;\frac{1}{L}$.根据频域采样时对时域周期延拓的思想,时域上将会以周期$\frac{1}{f}$对信号进行延拓.但由于$\frac{1}{f} &amp;lt; L$,因此进行频域采样后的信号重新恢复之后会出现信号混叠,也就是走样(aliasing)的现象&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;因为时域上采样时间为T,所以在频域上最高采样频率为$\frac{2\pi}{T}$,对$(0,\frac{2\pi}{T})$均匀采样得到
${\omega_k=\frac{2\pi k}{NT}}_{0\le k \lt N}$&lt;/p&gt;

&lt;p&gt;因此对$\hat f(\omega)$采样之后得到$\hat f[k]$&lt;/p&gt;

\[\begin{aligned}
\hat f[k]&amp;amp;=\hat f(\omega_k) = \sum_{n=0}^{N-1}f(nT)e^{-in\omega_k T}\\
&amp;amp;=  \sum_{n=0}^{N-1}f(nT)e^{-i\frac{2\pi}{N} kn}
\end{aligned}\]

&lt;p&gt;$\hat f[k]$即为$f(t)的离散傅里叶变换(DFT).&lt;/p&gt;

&lt;h3 id=&quot;连续时间傅里叶变换与拉普拉斯变换&quot;&gt;连续时间傅里叶变换与拉普拉斯变换&lt;/h3&gt;

&lt;p&gt;对于周期性连续信号，连续时间傅里叶变换的公式是：&lt;/p&gt;

\[\int^{\infty}_{-\infty}f(t)e^{-i\omega t}dt\]

&lt;p&gt;傅里叶变换要求时域信号绝对可积，即&lt;/p&gt;

\[\int^{\infty}_{-\infty}\lvert f(t)\rvert dt \lt \infty\]

&lt;p&gt;为了让不符合这个条件的信号，也能变换到频率域，我们给f(t)乘上一个指数函数$e ^ {-\sigma t}$, $\sigma$为（满足收敛域的）任意实数。&lt;/p&gt;

&lt;p&gt;可以发现$f(t)e^{-\sigma t}$这个函数就满足了绝对可积地条件，即$\int^{\infty}_{-\infty}\lvert f(t)e^{-\sigma t}\rvert dt \lt \infty$。&lt;/p&gt;

&lt;p&gt;于是这个新函数的傅立叶变换就是：$\int^{\infty}_{-\infty}f(t)e^{-(\sigma + i\omega)t}dt$&lt;/p&gt;

&lt;p&gt;由于$\sigma + i\omega$是一个复数，我们用新变量$s$表示。&lt;/p&gt;

&lt;p&gt;于是得到拉普拉斯变换的公式：$\int^{\infty}_{-\infty}f(t)e^{-st}dt$&lt;/p&gt;

&lt;p&gt;拉普拉斯变换解决了不满足绝对可积条件的连续信号，变换到频率域的问题，同时也对“频率”的定义进行了扩充。所以拉普拉斯变换与连续时间傅里叶变换的关系是：拉普拉斯变换将频率从实数推广为复数，因而傅里叶变换变成了拉普拉斯变换的一个特例。&lt;strong&gt;当s为纯虚数时，x(t)的拉普拉斯变换，即为x(t)的傅里叶变换。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;离散时间傅里叶变换dtft与z变换的关系&quot;&gt;离散时间傅里叶变换（DTFT）与Z变换的关系&lt;/h3&gt;
&lt;p&gt;DTFT公式为
\(\hat f(\omega)=\sum_{n=-\infty}^{\infty}f[n]e^{-in\omega}\)&lt;/p&gt;

&lt;p&gt;同样的，DTFT需要满足绝对可和的条件，即$\sum_{-\infty}^{\infty}\lvert x[n]\rvert \lt \infty$&lt;/p&gt;

&lt;p&gt;为了让不满足绝对可和条件的函数f[n]，也能变换到频率域，我们乘一个指数函数$a^{-n}$，a为（满足收敛域的）任意实数。则函数$f[n]a^{-n}$的DTFT为：$\sum_{-\infty}^{\infty}f&lt;a href=&quot;a\cdot e^{i\omega}&quot;&gt;n&lt;/a&gt;^{-n}$。&lt;/p&gt;

&lt;p&gt;$a\cdot e^{i\omega}$是一个极坐标形式的复数，我们把这个复数定义为离散信号的复频率，记为z。得到Z变换公式：&lt;/p&gt;

\[\sum_{-\infty}^{\infty}f[n]z^{-n}\]

&lt;blockquote&gt;
  &lt;p&gt;关于这里为什么对f[n]乘以$a^{-n}$而不是像拉氏变换中乘以$e^{-\sigma a}$，主要是由离散序列的DTFT的周期性决定的。如果对离散序列进行拉氏变换，将$\omega$映射到虚轴上，则得到的变换函数是在虚轴方向上周期变化的函数，这样就没有充分利用DTFT的周期性。而Z变换令$z=a\cdot e^{i\omega}$，则当a=1，即$z=e^{i\omega}$时，随着$\omega$从$-\infty$向$\infty$变化，z在复平面中的单位圆上以$2\pi$为周期变化，如此恰能充分利用DTFT的周期性进一步简化我们的计算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Z变换解决了不满足绝对可和条件的离散信号，变换到频率域的问题，同时也同样对“频率”的定义进行了扩充。所以Z变换与离散时间傅里叶变换（DTFT）的关系是：Z变换将频率从实数推广为复数，因而DTFT变成了Z变换的一个特例。当z的模为1时，$f[n]$的Z变换即为$f[n]$的DTFT&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41455378&quot;&gt;ElPsyCongree的知乎专栏&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2&quot;&gt;离散傅里叶变换&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/22085329&quot;&gt;傅里叶变换、拉普拉斯变换、Z 变换的联系是什么？为什么要进行这些变换？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;在ElPsyCongree的专栏关于傅里叶级数的介绍中作者讲了一段话：&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们眼中的世界就像皮影戏的大幕布，幕布的后面有无数的齿轮，大齿轮带动小齿轮，小齿轮再带动更小的。在最外面的小齿轮上有一个小人——那就是我们自己。我们只看到这个小人毫无规律的在幕布前表演，却无法预测他下一步会去哪。而幕布后面的齿轮却永远一直那样不停的旋转，永不停歇。这样说来有些宿命论的感觉。说实话，这种对人生的描绘是我一个朋友在我们都是高中生的时候感叹的，当时想想似懂非懂，直到有一天我学到了傅里叶级数……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;有的人一生都在小小的齿轮上周而复始的旋转,而学习的意义就在于能够让自己看到更大的齿轮的轨迹.&lt;/em&gt;&lt;/p&gt;</content><author><name>XPX</name></author><category term="高等数学" /><summary type="html">傅里叶级数 首先我们先介绍最简单的余弦函数,可以看见随着余弦函数频率的增加，函数的周期变得更短。 根据傅里叶级数，对于一个方波信号，是可以用很多个不同频率的余弦信号近似。从下图可以看到，随着频率更高的余弦函数加入，由余弦函数组成的信号就和方波更加接近。 对于任意的函数都可以展开成下面形式的三角级数: \[f(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}[a_n\cos(n\omega t)+b_n\sin(n\omega t)] \\ a_0=\frac{2}{T}\int_{t_0}^{t_0+T}f(t)dt \\ a_n = \frac{2}{T}\int_{t_0}^{t_0+T}f(t)\cos(n\omega t)dt \\ b_n = \frac{2}{T}\int_{t_0}^{t_0+T}f(t)\sin(n\omega t)dt\] 以上就是三角形式的傅里叶级数.详细的推导可以参照ElPsyCongree的知乎专栏中傅里叶级数部分. 连续傅里叶变换 欧拉公式 欧拉公式是复分析领域的公式，它将三角函数与复指数函数关联起来.其基本公式为: \[e^{i\theta}=\cos \theta+i\sin \theta\] 其中$e$是自然对数的底数，$i$ 是虚数单位，而 $\cos$ 和 $\sin$ 则是余弦、正弦对应的三角函数，参数 $\theta$ 则以弧度为单位。 经过简单的变形之后可以得到: \[\cos \theta = \frac{e^{i\theta}+e^{-i\theta}}{2}\] \[\sin \theta = -i\frac{e^{i\theta}-e^{-i\theta}}{2}\] 指数形式的傅里叶级数 $\cos \theta$和$\sin \theta$代入傅里叶级数之后可以得到: \[f(t) = \frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n\frac{e^{in\omega t}+e^{-in\omega t}}{2} - ib_n\frac{e^{in\omega t}-e^{-in\omega t}}{2})\\= \frac{a_0}{2}+\sum_{n=1}^{\infty}(\frac{a_n-ib_n}{2}e^{in\omega t}+\frac{a_n+ib_n}{2}e^{-in\omega t})\tag{1}\] 再将$a_0,a_n,b_n$的公式代入得到: \[\begin{aligned} \frac{a_n-ib_n}{2}&amp;amp;=\frac{1}{T}[\int^{t_0+T}_{t_0}f(t)\cos(n\omega t)dt - i \int^{t_0+T}_{t_0}f(t)\sin(n\omega t)dt]\\ &amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)[\cos(n\omega t)- i\sin(n\omega t)]dt \\ &amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)[\frac{e^{in\omega t}+e^{-in\omega t}}{2}-i\cdot (-i)\cdot \frac{e^{in\omega t}-e^{-in\omega t}}{2}]dt\\ &amp;amp;=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \end{aligned} \tag{2}\] 同理可以得到 \[\frac{a_n+ib_n}{2}=\frac{1}{T}\int^{t_0+T}_{t_0}f(t)e^{in\omega t}dt\tag{3}\] 将公式(2)(3)代入(1)得到: \[\begin{aligned} f(t) &amp;amp;= \frac{1}{T} \int^{t_0+T}_{t_0}f(t)dt + \frac{1}{T}\sum_{n=1}^{\infty}[\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}+\int^{t_0+T}_{t_0}f(t)e^{in\omega t}dt \cdot e^{-in\omega t}]\\ &amp;amp;=\frac{1}{T} \int^{t_0+T}_{t_0}f(t)dt + \frac{1}{T}\sum_{n=1}^{\infty}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}+\frac{1}{T}\sum_{n=-\infty}^{0}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t}\\ &amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt \cdot e^{in\omega t} \\ &amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}\int^{\frac{T}{2}}_{-\frac{T}{2}}f(t)e^{-in\omega t}dt \cdot e^{in\omega t} \end{aligned}\tag{4}\] 令 \[F(n\omega)=\int^{t_0+T}_{t_0}f(t)e^{-in\omega t}dt\] 则有: \[f(t)=\frac{1}{T}\sum_{n=-\infty}^{\infty}F(nw)e^{in\omega t}\] 我们令$w_n=n\omega$,则有: \[F(\omega_n)=\int^{t_0+T}_{t_0}f(t)e^{-i\omega_n t}dt\] 由于$\omega=\frac{2\pi}{T}$: \[\begin{aligned} f(t)&amp;amp;=\frac{1}{T}\sum_{n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\ &amp;amp;=\frac{\omega}{2\pi}\sum_{n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\ &amp;amp;=\frac{1}{2\pi}\sum_{\omega_n=-\infty}^{\infty}F(w_n)e^{i\omega_n t}\\ &amp;amp;=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(w_n)e^{i\omega_n t}d\omega_n \end{aligned}\] 最终可以得到傅里叶变换对: \[F(\omega)=\int^{t_0+T}_{t_0}f(t)e^{-i\omega t}dt \tag{5}\] \[f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}F(\omega)e^{i\omega t}d\omega\tag{6}\] 离散傅里叶变换 离散傅里叶变换是傅里叶变换在时域和频域上都呈离散的形式，将信号的时域采样变换为其DTFT的频域采样。 在形式上，变换两端（时域和频域上）的序列是有限长的，而实际上这两组序列都应当被认为是离散周期信号的主值序列。即使对有限长的离散信号作DFT，也应当将其看作其周期延拓的变换。 DFT就是先将信号在时域离散化，求其连续傅里叶变换后，再在频域离散化的结果。 在获得离散傅里叶变换之前需要先对连续函数采样,因此,在介绍离散傅里叶变换之前,我们先讲一下采样定理. 采样定理 采样定理是美国电信工程师H.奈奎斯特在1928年提出的，在数字信号处理领域中，采样定理是连续时间信号（通常称为“模拟信号”）和离散时间信号（通常称为“数字信号”）之间的基本桥梁。 在进行模拟/数字信号的转换过程中，当采样频率$f_{s.max}$大于信号中最高频率$f_{max}$的2倍时($f_{s.max} &amp;gt; 2f_{max}$)，采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。 离散时间傅里叶变换(Discrete-time Fourier Transform,DTFT) 假设将(0,L)区间的f(t)通过时域采样的方式离散化,得到有限长的离散信号. 我们设定采样周期为 $T$,则在该时域的采样点数为$N=\frac{L}{T}$,这边由于符号冲突,我们用L表示之前的时域T,用现在的T表示采样的周期 \[f_{discrete}(t)=f(t)\sum_{n=0}^{N-1}\delta(t-nT)=\sum_{n=0}^{N-1}f(nT)\delta(t-nT)\] 我们对$f_{discrete}(t)$进行傅里叶变换,根据傅里叶变换的时移特性,可以得到: \[\hat f(\omega)=\sum_{n=0}^{N-1}f(nT)\mathcal{F}(\delta(t-nT))=\sum_{n=0}^{N-1}f(nT)e^{-in\omega T}\] $\hat f(\omega)$就是在时域采样后的连续傅里叶变换,也就是离散时间傅里叶变换(Discrete-time Fourier Transform,DTFT),它在频域上还是连续的. 当对时域采样区间为$(-\infty,\infty)$时，有 \[\hat f(\omega)=\sum_{n=-\infty}^{\infty}f(nT)e^{-in\omega T}\] 对于采样后的信号来说，我们有时候并不在意它原始的采样率。因此我们令$f[n]=f(nT)$,$\hat f(\omega) = \hat f(\omega T)$,得到 \(\hat f(\omega)=\sum_{n=-\infty}^{\infty}f[n]e^{-in\omega}\) 离散傅里叶变换(Discrete Fourier Transform) 本部分时将频域上连续的信号转化成离散信号。与对时域信号的处理类似，假设频域信号是带限的，再经过离散化，即可得到有限长离散信号。对频域的均匀采样实际上是对时域的周期延拓,其周期为频域采样周期的导数. 根据我们上上部分提到的采样定理,时域采样若要能完全重建原信号，频域信号$\hat f(\omega)$应当带限于$(0,\frac{1}{2T})$.即频域的信号不能大于$\frac{1}{2T}$. 由于时域信号受限于$[0,L]$,根据采样定理以及时频对偶的关系，频域的采样间隔应为$\frac{1}{L}$.采样数为: \[\frac{1/T}{1/L}=N\] 即频域采样的点数和时域采样都为N.如果频域采样点数小于时域点数,即实际的频域采样间隔$f&amp;gt;\frac{1}{L}$.根据频域采样时对时域周期延拓的思想,时域上将会以周期$\frac{1}{f}$对信号进行延拓.但由于$\frac{1}{f} &amp;lt; L$,因此进行频域采样后的信号重新恢复之后会出现信号混叠,也就是走样(aliasing)的现象 因为时域上采样时间为T,所以在频域上最高采样频率为$\frac{2\pi}{T}$,对$(0,\frac{2\pi}{T})$均匀采样得到 ${\omega_k=\frac{2\pi k}{NT}}_{0\le k \lt N}$ 因此对$\hat f(\omega)$采样之后得到$\hat f[k]$ \[\begin{aligned} \hat f[k]&amp;amp;=\hat f(\omega_k) = \sum_{n=0}^{N-1}f(nT)e^{-in\omega_k T}\\ &amp;amp;= \sum_{n=0}^{N-1}f(nT)e^{-i\frac{2\pi}{N} kn} \end{aligned}\] $\hat f[k]$即为$f(t)的离散傅里叶变换(DFT). 连续时间傅里叶变换与拉普拉斯变换 对于周期性连续信号，连续时间傅里叶变换的公式是： \[\int^{\infty}_{-\infty}f(t)e^{-i\omega t}dt\] 傅里叶变换要求时域信号绝对可积，即 \[\int^{\infty}_{-\infty}\lvert f(t)\rvert dt \lt \infty\] 为了让不符合这个条件的信号，也能变换到频率域，我们给f(t)乘上一个指数函数$e ^ {-\sigma t}$, $\sigma$为（满足收敛域的）任意实数。 可以发现$f(t)e^{-\sigma t}$这个函数就满足了绝对可积地条件，即$\int^{\infty}_{-\infty}\lvert f(t)e^{-\sigma t}\rvert dt \lt \infty$。 于是这个新函数的傅立叶变换就是：$\int^{\infty}_{-\infty}f(t)e^{-(\sigma + i\omega)t}dt$ 由于$\sigma + i\omega$是一个复数，我们用新变量$s$表示。 于是得到拉普拉斯变换的公式：$\int^{\infty}_{-\infty}f(t)e^{-st}dt$ 拉普拉斯变换解决了不满足绝对可积条件的连续信号，变换到频率域的问题，同时也对“频率”的定义进行了扩充。所以拉普拉斯变换与连续时间傅里叶变换的关系是：拉普拉斯变换将频率从实数推广为复数，因而傅里叶变换变成了拉普拉斯变换的一个特例。当s为纯虚数时，x(t)的拉普拉斯变换，即为x(t)的傅里叶变换。 离散时间傅里叶变换（DTFT）与Z变换的关系 DTFT公式为 \(\hat f(\omega)=\sum_{n=-\infty}^{\infty}f[n]e^{-in\omega}\) 同样的，DTFT需要满足绝对可和的条件，即$\sum_{-\infty}^{\infty}\lvert x[n]\rvert \lt \infty$ 为了让不满足绝对可和条件的函数f[n]，也能变换到频率域，我们乘一个指数函数$a^{-n}$，a为（满足收敛域的）任意实数。则函数$f[n]a^{-n}$的DTFT为：$\sum_{-\infty}^{\infty}fn^{-n}$。 $a\cdot e^{i\omega}$是一个极坐标形式的复数，我们把这个复数定义为离散信号的复频率，记为z。得到Z变换公式： \[\sum_{-\infty}^{\infty}f[n]z^{-n}\] 关于这里为什么对f[n]乘以$a^{-n}$而不是像拉氏变换中乘以$e^{-\sigma a}$，主要是由离散序列的DTFT的周期性决定的。如果对离散序列进行拉氏变换，将$\omega$映射到虚轴上，则得到的变换函数是在虚轴方向上周期变化的函数，这样就没有充分利用DTFT的周期性。而Z变换令$z=a\cdot e^{i\omega}$，则当a=1，即$z=e^{i\omega}$时，随着$\omega$从$-\infty$向$\infty$变化，z在复平面中的单位圆上以$2\pi$为周期变化，如此恰能充分利用DTFT的周期性进一步简化我们的计算。 Z变换解决了不满足绝对可和条件的离散信号，变换到频率域的问题，同时也同样对“频率”的定义进行了扩充。所以Z变换与离散时间傅里叶变换（DTFT）的关系是：Z变换将频率从实数推广为复数，因而DTFT变成了Z变换的一个特例。当z的模为1时，$f[n]$的Z变换即为$f[n]$的DTFT 参考资料: ElPsyCongree的知乎专栏 离散傅里叶变换 傅里叶变换、拉普拉斯变换、Z 变换的联系是什么？为什么要进行这些变换？ 在ElPsyCongree的专栏关于傅里叶级数的介绍中作者讲了一段话： 我们眼中的世界就像皮影戏的大幕布，幕布的后面有无数的齿轮，大齿轮带动小齿轮，小齿轮再带动更小的。在最外面的小齿轮上有一个小人——那就是我们自己。我们只看到这个小人毫无规律的在幕布前表演，却无法预测他下一步会去哪。而幕布后面的齿轮却永远一直那样不停的旋转，永不停歇。这样说来有些宿命论的感觉。说实话，这种对人生的描绘是我一个朋友在我们都是高中生的时候感叹的，当时想想似懂非懂，直到有一天我学到了傅里叶级数…… 有的人一生都在小小的齿轮上周而复始的旋转,而学习的意义就在于能够让自己看到更大的齿轮的轨迹.</summary></entry></feed>